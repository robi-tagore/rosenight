"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/m3u8stream";
exports.ids = ["vendor-chunks/m3u8stream"];
exports.modules = {

/***/ "(rsc)/./node_modules/m3u8stream/dist/dash-mpd-parser.js":
/*!*********************************************************!*\
  !*** ./node_modules/m3u8stream/dist/dash-mpd-parser.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst sax_1 = __importDefault(__webpack_require__(/*! sax */ \"(rsc)/./node_modules/sax/lib/sax.js\"));\nconst parse_time_1 = __webpack_require__(/*! ./parse-time */ \"(rsc)/./node_modules/m3u8stream/dist/parse-time.js\");\n/**\n * A wrapper around sax that emits segments.\n */ class DashMPDParser extends stream_1.Writable {\n    constructor(targetID){\n        super();\n        this._parser = sax_1.default.createStream(false, {\n            lowercase: true\n        });\n        this._parser.on(\"error\", this.destroy.bind(this));\n        let lastTag;\n        let currtime = 0;\n        let seq = 0;\n        let segmentTemplate;\n        let timescale, offset, duration, baseURL;\n        let timeline = [];\n        let getSegments = false;\n        let gotSegments = false;\n        let isStatic;\n        let treeLevel;\n        let periodStart;\n        const tmpl = (str)=>{\n            const context = {\n                RepresentationID: targetID,\n                Number: seq,\n                Time: currtime\n            };\n            return str.replace(/\\$(\\w+)\\$/g, (m, p1)=>`${context[p1]}`);\n        };\n        this._parser.on(\"opentag\", (node)=>{\n            switch(node.name){\n                case \"mpd\":\n                    currtime = node.attributes.availabilitystarttime ? new Date(node.attributes.availabilitystarttime).getTime() : 0;\n                    isStatic = node.attributes.type !== \"dynamic\";\n                    break;\n                case \"period\":\n                    // Reset everything on <Period> tag.\n                    seq = 0;\n                    timescale = 1000;\n                    duration = 0;\n                    offset = 0;\n                    baseURL = [];\n                    treeLevel = 0;\n                    periodStart = parse_time_1.durationStr(node.attributes.start) || 0;\n                    break;\n                case \"segmentlist\":\n                    seq = parseInt(node.attributes.startnumber) || seq;\n                    timescale = parseInt(node.attributes.timescale) || timescale;\n                    duration = parseInt(node.attributes.duration) || duration;\n                    offset = parseInt(node.attributes.presentationtimeoffset) || offset;\n                    break;\n                case \"segmenttemplate\":\n                    segmentTemplate = node.attributes;\n                    seq = parseInt(node.attributes.startnumber) || seq;\n                    timescale = parseInt(node.attributes.timescale) || timescale;\n                    break;\n                case \"segmenttimeline\":\n                case \"baseurl\":\n                    lastTag = node.name;\n                    break;\n                case \"s\":\n                    timeline.push({\n                        duration: parseInt(node.attributes.d),\n                        repeat: parseInt(node.attributes.r),\n                        time: parseInt(node.attributes.t)\n                    });\n                    break;\n                case \"adaptationset\":\n                case \"representation\":\n                    treeLevel++;\n                    if (!targetID) {\n                        targetID = node.attributes.id;\n                    }\n                    getSegments = node.attributes.id === `${targetID}`;\n                    if (getSegments) {\n                        if (periodStart) {\n                            currtime += periodStart;\n                        }\n                        if (offset) {\n                            currtime -= offset / timescale * 1000;\n                        }\n                        this.emit(\"starttime\", currtime);\n                    }\n                    break;\n                case \"initialization\":\n                    if (getSegments) {\n                        this.emit(\"item\", {\n                            url: baseURL.filter((s)=>!!s).join(\"\") + node.attributes.sourceurl,\n                            seq: seq,\n                            init: true,\n                            duration: 0\n                        });\n                    }\n                    break;\n                case \"segmenturl\":\n                    if (getSegments) {\n                        gotSegments = true;\n                        let tl = timeline.shift();\n                        let segmentDuration = ((tl === null || tl === void 0 ? void 0 : tl.duration) || duration) / timescale * 1000;\n                        this.emit(\"item\", {\n                            url: baseURL.filter((s)=>!!s).join(\"\") + node.attributes.media,\n                            seq: seq++,\n                            duration: segmentDuration\n                        });\n                        currtime += segmentDuration;\n                    }\n                    break;\n            }\n        });\n        const onEnd = ()=>{\n            if (isStatic) {\n                this.emit(\"endlist\");\n            }\n            if (!getSegments) {\n                this.destroy(Error(`Representation '${targetID}' not found`));\n            } else {\n                this.emit(\"end\");\n            }\n        };\n        this._parser.on(\"closetag\", (tagName)=>{\n            switch(tagName){\n                case \"adaptationset\":\n                case \"representation\":\n                    treeLevel--;\n                    if (segmentTemplate && timeline.length) {\n                        gotSegments = true;\n                        if (segmentTemplate.initialization) {\n                            this.emit(\"item\", {\n                                url: baseURL.filter((s)=>!!s).join(\"\") + tmpl(segmentTemplate.initialization),\n                                seq: seq,\n                                init: true,\n                                duration: 0\n                            });\n                        }\n                        for (let { duration: itemDuration, repeat, time } of timeline){\n                            itemDuration = itemDuration / timescale * 1000;\n                            repeat = repeat || 1;\n                            currtime = time || currtime;\n                            for(let i = 0; i < repeat; i++){\n                                this.emit(\"item\", {\n                                    url: baseURL.filter((s)=>!!s).join(\"\") + tmpl(segmentTemplate.media),\n                                    seq: seq++,\n                                    duration: itemDuration\n                                });\n                                currtime += itemDuration;\n                            }\n                        }\n                    }\n                    if (gotSegments) {\n                        this.emit(\"endearly\");\n                        onEnd();\n                        this._parser.removeAllListeners();\n                        this.removeAllListeners(\"finish\");\n                    }\n                    break;\n            }\n        });\n        this._parser.on(\"text\", (text)=>{\n            if (lastTag === \"baseurl\") {\n                baseURL[treeLevel] = text;\n                lastTag = null;\n            }\n        });\n        this.on(\"finish\", onEnd);\n    }\n    _write(chunk, encoding, callback) {\n        this._parser.write(chunk);\n        callback();\n    }\n}\nexports[\"default\"] = DashMPDParser; //# sourceMappingURL=dash-mpd-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/m3u8stream/dist/dash-mpd-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/m3u8stream/dist/index.js":
/*!***********************************************!*\
  !*** ./node_modules/m3u8stream/dist/index.js ***!
  \***********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst miniget_1 = __importDefault(__webpack_require__(/*! miniget */ \"(rsc)/./node_modules/miniget/dist/index.js\"));\nconst m3u8_parser_1 = __importDefault(__webpack_require__(/*! ./m3u8-parser */ \"(rsc)/./node_modules/m3u8stream/dist/m3u8-parser.js\"));\nconst dash_mpd_parser_1 = __importDefault(__webpack_require__(/*! ./dash-mpd-parser */ \"(rsc)/./node_modules/m3u8stream/dist/dash-mpd-parser.js\"));\nconst queue_1 = __webpack_require__(/*! ./queue */ \"(rsc)/./node_modules/m3u8stream/dist/queue.js\");\nconst parse_time_1 = __webpack_require__(/*! ./parse-time */ \"(rsc)/./node_modules/m3u8stream/dist/parse-time.js\");\nconst supportedParsers = {\n    m3u8: m3u8_parser_1.default,\n    \"dash-mpd\": dash_mpd_parser_1.default\n};\nlet m3u8stream = (playlistURL, options = {})=>{\n    const stream = new stream_1.PassThrough({\n        highWaterMark: options.highWaterMark\n    });\n    const chunkReadahead = options.chunkReadahead || 3;\n    // 20 seconds.\n    const liveBuffer = options.liveBuffer || 20000;\n    const requestOptions = options.requestOptions;\n    const Parser = supportedParsers[options.parser || (/\\.mpd$/.test(playlistURL) ? \"dash-mpd\" : \"m3u8\")];\n    if (!Parser) {\n        throw TypeError(`parser '${options.parser}' not supported`);\n    }\n    let begin = 0;\n    if (typeof options.begin !== \"undefined\") {\n        begin = typeof options.begin === \"string\" ? parse_time_1.humanStr(options.begin) : Math.max(options.begin - liveBuffer, 0);\n    }\n    const forwardEvents = (req)=>{\n        for (let event of [\n            \"abort\",\n            \"request\",\n            \"response\",\n            \"redirect\",\n            \"retry\",\n            \"reconnect\"\n        ]){\n            req.on(event, stream.emit.bind(stream, event));\n        }\n    };\n    let currSegment;\n    const streamQueue = new queue_1.Queue((req, callback)=>{\n        currSegment = req;\n        // Count the size manually, since the `content-length` header is not\n        // always there.\n        let size = 0;\n        req.on(\"data\", (chunk)=>size += chunk.length);\n        req.pipe(stream, {\n            end: false\n        });\n        req.on(\"end\", ()=>callback(null, size));\n    }, {\n        concurrency: 1\n    });\n    let segmentNumber = 0;\n    let downloaded = 0;\n    const requestQueue = new queue_1.Queue((segment, callback)=>{\n        let reqOptions = Object.assign({}, requestOptions);\n        if (segment.range) {\n            reqOptions.headers = Object.assign({}, reqOptions.headers, {\n                Range: `bytes=${segment.range.start}-${segment.range.end}`\n            });\n        }\n        let req = miniget_1.default(new URL(segment.url, playlistURL).toString(), reqOptions);\n        req.on(\"error\", callback);\n        forwardEvents(req);\n        streamQueue.push(req, (_, size)=>{\n            downloaded += +size;\n            stream.emit(\"progress\", {\n                num: ++segmentNumber,\n                size: size,\n                duration: segment.duration,\n                url: segment.url\n            }, requestQueue.total, downloaded);\n            callback(null);\n        });\n    }, {\n        concurrency: chunkReadahead\n    });\n    const onError = (err)=>{\n        stream.emit(\"error\", err);\n        // Stop on any error.\n        stream.end();\n    };\n    // When to look for items again.\n    let refreshThreshold;\n    let minRefreshTime;\n    let refreshTimeout;\n    let fetchingPlaylist = true;\n    let ended = false;\n    let isStatic = false;\n    let lastRefresh;\n    const onQueuedEnd = (err)=>{\n        currSegment = null;\n        if (err) {\n            onError(err);\n        } else if (!fetchingPlaylist && !ended && !isStatic && requestQueue.tasks.length + requestQueue.active <= refreshThreshold) {\n            let ms = Math.max(0, minRefreshTime - (Date.now() - lastRefresh));\n            fetchingPlaylist = true;\n            refreshTimeout = setTimeout(refreshPlaylist, ms);\n        } else if ((ended || isStatic) && !requestQueue.tasks.length && !requestQueue.active) {\n            stream.end();\n        }\n    };\n    let currPlaylist;\n    let lastSeq;\n    let starttime = 0;\n    const refreshPlaylist = ()=>{\n        lastRefresh = Date.now();\n        currPlaylist = miniget_1.default(playlistURL, requestOptions);\n        currPlaylist.on(\"error\", onError);\n        forwardEvents(currPlaylist);\n        const parser = currPlaylist.pipe(new Parser(options.id));\n        parser.on(\"starttime\", (a)=>{\n            if (starttime) {\n                return;\n            }\n            starttime = a;\n            if (typeof options.begin === \"string\" && begin >= 0) {\n                begin += starttime;\n            }\n        });\n        parser.on(\"endlist\", ()=>{\n            isStatic = true;\n        });\n        parser.on(\"endearly\", currPlaylist.unpipe.bind(currPlaylist, parser));\n        let addedItems = [];\n        const addItem = (item)=>{\n            if (!item.init) {\n                if (item.seq <= lastSeq) {\n                    return;\n                }\n                lastSeq = item.seq;\n            }\n            begin = item.time;\n            requestQueue.push(item, onQueuedEnd);\n            addedItems.push(item);\n        };\n        let tailedItems = [], tailedItemsDuration = 0;\n        parser.on(\"item\", (item)=>{\n            let timedItem = Object.assign({\n                time: starttime\n            }, item);\n            if (begin <= timedItem.time) {\n                addItem(timedItem);\n            } else {\n                tailedItems.push(timedItem);\n                tailedItemsDuration += timedItem.duration;\n                // Only keep the last `liveBuffer` of items.\n                while(tailedItems.length > 1 && tailedItemsDuration - tailedItems[0].duration > liveBuffer){\n                    const lastItem = tailedItems.shift();\n                    tailedItemsDuration -= lastItem.duration;\n                }\n            }\n            starttime += timedItem.duration;\n        });\n        parser.on(\"end\", ()=>{\n            currPlaylist = null;\n            // If we are too ahead of the stream, make sure to get the\n            // latest available items with a small buffer.\n            if (!addedItems.length && tailedItems.length) {\n                tailedItems.forEach((item)=>{\n                    addItem(item);\n                });\n            }\n            // Refresh the playlist when remaining segments get low.\n            refreshThreshold = Math.max(1, Math.ceil(addedItems.length * 0.01));\n            // Throttle refreshing the playlist by looking at the duration\n            // of live items added on this refresh.\n            minRefreshTime = addedItems.reduce((total, item)=>item.duration + total, 0);\n            fetchingPlaylist = false;\n            onQueuedEnd(null);\n        });\n    };\n    refreshPlaylist();\n    stream.end = ()=>{\n        ended = true;\n        streamQueue.die();\n        requestQueue.die();\n        clearTimeout(refreshTimeout);\n        currPlaylist === null || currPlaylist === void 0 ? void 0 : currPlaylist.destroy();\n        currSegment === null || currSegment === void 0 ? void 0 : currSegment.destroy();\n        stream_1.PassThrough.prototype.end.call(stream, null);\n        return stream;\n    };\n    return stream;\n};\nm3u8stream.parseTimestamp = parse_time_1.humanStr;\nmodule.exports = m3u8stream; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/m3u8stream/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/m3u8stream/dist/m3u8-parser.js":
/*!*****************************************************!*\
  !*** ./node_modules/m3u8stream/dist/m3u8-parser.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\n/**\n * A very simple m3u8 playlist file parser that detects tags and segments.\n */ class m3u8Parser extends stream_1.Writable {\n    constructor(){\n        super();\n        this._lastLine = \"\";\n        this._seq = 0;\n        this._nextItemDuration = null;\n        this._nextItemRange = null;\n        this._lastItemRangeEnd = 0;\n        this.on(\"finish\", ()=>{\n            this._parseLine(this._lastLine);\n            this.emit(\"end\");\n        });\n    }\n    _parseAttrList(value) {\n        let attrs = {};\n        let regex = /([A-Z0-9-]+)=(?:\"([^\"]*?)\"|([^,]*?))/g;\n        let match;\n        while((match = regex.exec(value)) !== null){\n            attrs[match[1]] = match[2] || match[3];\n        }\n        return attrs;\n    }\n    _parseRange(value) {\n        if (!value) return null;\n        let svalue = value.split(\"@\");\n        let start = svalue[1] ? parseInt(svalue[1]) : this._lastItemRangeEnd + 1;\n        let end = start + parseInt(svalue[0]) - 1;\n        let range = {\n            start,\n            end\n        };\n        this._lastItemRangeEnd = range.end;\n        return range;\n    }\n    _parseLine(line) {\n        let match = line.match(/^#(EXT[A-Z0-9-]+)(?::(.*))?/);\n        if (match) {\n            // This is a tag.\n            const tag = match[1];\n            const value = match[2] || \"\";\n            switch(tag){\n                case \"EXT-X-PROGRAM-DATE-TIME\":\n                    this.emit(\"starttime\", new Date(value).getTime());\n                    break;\n                case \"EXT-X-MEDIA-SEQUENCE\":\n                    this._seq = parseInt(value);\n                    break;\n                case \"EXT-X-MAP\":\n                    {\n                        let attrs = this._parseAttrList(value);\n                        if (!attrs.URI) {\n                            this.destroy(new Error(\"`EXT-X-MAP` found without required attribute `URI`\"));\n                            return;\n                        }\n                        this.emit(\"item\", {\n                            url: attrs.URI,\n                            seq: this._seq,\n                            init: true,\n                            duration: 0,\n                            range: this._parseRange(attrs.BYTERANGE)\n                        });\n                        break;\n                    }\n                case \"EXT-X-BYTERANGE\":\n                    {\n                        this._nextItemRange = this._parseRange(value);\n                        break;\n                    }\n                case \"EXTINF\":\n                    this._nextItemDuration = Math.round(parseFloat(value.split(\",\")[0]) * 1000);\n                    break;\n                case \"EXT-X-ENDLIST\":\n                    this.emit(\"endlist\");\n                    break;\n            }\n        } else if (!/^#/.test(line) && line.trim()) {\n            // This is a segment\n            this.emit(\"item\", {\n                url: line.trim(),\n                seq: this._seq++,\n                duration: this._nextItemDuration,\n                range: this._nextItemRange\n            });\n            this._nextItemRange = null;\n        }\n    }\n    _write(chunk, encoding, callback) {\n        let lines = chunk.toString(\"utf8\").split(\"\\n\");\n        if (this._lastLine) {\n            lines[0] = this._lastLine + lines[0];\n        }\n        lines.forEach((line, i)=>{\n            if (this.destroyed) return;\n            if (i < lines.length - 1) {\n                this._parseLine(line);\n            } else {\n                // Save the last line in case it has been broken up.\n                this._lastLine = line;\n            }\n        });\n        callback();\n    }\n}\nexports[\"default\"] = m3u8Parser; //# sourceMappingURL=m3u8-parser.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/m3u8stream/dist/m3u8-parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/m3u8stream/dist/parse-time.js":
/*!****************************************************!*\
  !*** ./node_modules/m3u8stream/dist/parse-time.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.durationStr = exports.humanStr = void 0;\nconst numberFormat = /^\\d+$/;\nconst timeFormat = /^(?:(?:(\\d+):)?(\\d{1,2}):)?(\\d{1,2})(?:\\.(\\d{3}))?$/;\nconst timeUnits = {\n    ms: 1,\n    s: 1000,\n    m: 60000,\n    h: 3600000\n};\n/**\n * Converts human friendly time to milliseconds. Supports the format\n * 00:00:00.000 for hours, minutes, seconds, and milliseconds respectively.\n * And 0ms, 0s, 0m, 0h, and together 1m1s.\n *\n * @param {number|string} time\n * @returns {number}\n */ exports.humanStr = (time)=>{\n    if (typeof time === \"number\") {\n        return time;\n    }\n    if (numberFormat.test(time)) {\n        return +time;\n    }\n    const firstFormat = timeFormat.exec(time);\n    if (firstFormat) {\n        return +(firstFormat[1] || 0) * timeUnits.h + +(firstFormat[2] || 0) * timeUnits.m + +firstFormat[3] * timeUnits.s + +(firstFormat[4] || 0);\n    } else {\n        let total = 0;\n        const r = /(-?\\d+)(ms|s|m|h)/g;\n        let rs;\n        while((rs = r.exec(time)) !== null){\n            total += +rs[1] * timeUnits[rs[2]];\n        }\n        return total;\n    }\n};\n/**\n * Parses a duration string in the form of \"123.456S\", returns milliseconds.\n *\n * @param {string} time\n * @returns {number}\n */ exports.durationStr = (time)=>{\n    let total = 0;\n    const r = /(\\d+(?:\\.\\d+)?)(S|M|H)/g;\n    let rs;\n    while((rs = r.exec(time)) !== null){\n        total += +rs[1] * timeUnits[rs[2].toLowerCase()];\n    }\n    return total;\n}; //# sourceMappingURL=parse-time.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbTN1OHN0cmVhbS9kaXN0L3BhcnNlLXRpbWUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELG1CQUFtQixHQUFHQSxnQkFBZ0IsR0FBRyxLQUFLO0FBQzlDLE1BQU1JLGVBQWU7QUFDckIsTUFBTUMsYUFBYTtBQUNuQixNQUFNQyxZQUFZO0lBQ2RDLElBQUk7SUFDSkMsR0FBRztJQUNIQyxHQUFHO0lBQ0hDLEdBQUc7QUFDUDtBQUNBOzs7Ozs7O0NBT0MsR0FDRFYsZ0JBQWdCLEdBQUcsQ0FBQ1c7SUFDaEIsSUFBSSxPQUFPQSxTQUFTLFVBQVU7UUFDMUIsT0FBT0E7SUFDWDtJQUNBLElBQUlQLGFBQWFRLElBQUksQ0FBQ0QsT0FBTztRQUN6QixPQUFPLENBQUNBO0lBQ1o7SUFDQSxNQUFNRSxjQUFjUixXQUFXUyxJQUFJLENBQUNIO0lBQ3BDLElBQUlFLGFBQWE7UUFDYixPQUFPLENBQUdBLENBQUFBLFdBQVcsQ0FBQyxFQUFFLElBQUksS0FBS1AsVUFBVUksQ0FBQyxHQUN2QyxDQUFFRyxDQUFBQSxXQUFXLENBQUMsRUFBRSxJQUFJLEtBQUtQLFVBQVVHLENBQUMsR0FDcEMsQ0FBQ0ksV0FBVyxDQUFDLEVBQUUsR0FBR1AsVUFBVUUsQ0FBQyxHQUM5QixDQUFFSyxDQUFBQSxXQUFXLENBQUMsRUFBRSxJQUFJO0lBQzVCLE9BQ0s7UUFDRCxJQUFJRSxRQUFRO1FBQ1osTUFBTUMsSUFBSTtRQUNWLElBQUlDO1FBQ0osTUFBTyxDQUFDQSxLQUFLRCxFQUFFRixJQUFJLENBQUNILEtBQUksTUFBTyxLQUFNO1lBQ2pDSSxTQUFTLENBQUNFLEVBQUUsQ0FBQyxFQUFFLEdBQUdYLFNBQVMsQ0FBQ1csRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUN0QztRQUNBLE9BQU9GO0lBQ1g7QUFDSjtBQUNBOzs7OztDQUtDLEdBQ0RmLG1CQUFtQixHQUFHLENBQUNXO0lBQ25CLElBQUlJLFFBQVE7SUFDWixNQUFNQyxJQUFJO0lBQ1YsSUFBSUM7SUFDSixNQUFPLENBQUNBLEtBQUtELEVBQUVGLElBQUksQ0FBQ0gsS0FBSSxNQUFPLEtBQU07UUFDakNJLFNBQVMsQ0FBQ0UsRUFBRSxDQUFDLEVBQUUsR0FBR1gsU0FBUyxDQUFDVyxFQUFFLENBQUMsRUFBRSxDQUFDQyxXQUFXLEdBQUc7SUFDcEQ7SUFDQSxPQUFPSDtBQUNYLEdBQ0Esc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcm9zZS8uL25vZGVfbW9kdWxlcy9tM3U4c3RyZWFtL2Rpc3QvcGFyc2UtdGltZS5qcz80ZmJlIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5kdXJhdGlvblN0ciA9IGV4cG9ydHMuaHVtYW5TdHIgPSB2b2lkIDA7XG5jb25zdCBudW1iZXJGb3JtYXQgPSAvXlxcZCskLztcbmNvbnN0IHRpbWVGb3JtYXQgPSAvXig/Oig/OihcXGQrKTopPyhcXGR7MSwyfSk6KT8oXFxkezEsMn0pKD86XFwuKFxcZHszfSkpPyQvO1xuY29uc3QgdGltZVVuaXRzID0ge1xuICAgIG1zOiAxLFxuICAgIHM6IDEwMDAsXG4gICAgbTogNjAwMDAsXG4gICAgaDogMzYwMDAwMCxcbn07XG4vKipcbiAqIENvbnZlcnRzIGh1bWFuIGZyaWVuZGx5IHRpbWUgdG8gbWlsbGlzZWNvbmRzLiBTdXBwb3J0cyB0aGUgZm9ybWF0XG4gKiAwMDowMDowMC4wMDAgZm9yIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBhbmQgbWlsbGlzZWNvbmRzIHJlc3BlY3RpdmVseS5cbiAqIEFuZCAwbXMsIDBzLCAwbSwgMGgsIGFuZCB0b2dldGhlciAxbTFzLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gdGltZVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0cy5odW1hblN0ciA9ICh0aW1lKSA9PiB7XG4gICAgaWYgKHR5cGVvZiB0aW1lID09PSAnbnVtYmVyJykge1xuICAgICAgICByZXR1cm4gdGltZTtcbiAgICB9XG4gICAgaWYgKG51bWJlckZvcm1hdC50ZXN0KHRpbWUpKSB7XG4gICAgICAgIHJldHVybiArdGltZTtcbiAgICB9XG4gICAgY29uc3QgZmlyc3RGb3JtYXQgPSB0aW1lRm9ybWF0LmV4ZWModGltZSk7XG4gICAgaWYgKGZpcnN0Rm9ybWF0KSB7XG4gICAgICAgIHJldHVybiAoKyhmaXJzdEZvcm1hdFsxXSB8fCAwKSAqIHRpbWVVbml0cy5oKSArXG4gICAgICAgICAgICAoKyhmaXJzdEZvcm1hdFsyXSB8fCAwKSAqIHRpbWVVbml0cy5tKSArXG4gICAgICAgICAgICAoK2ZpcnN0Rm9ybWF0WzNdICogdGltZVVuaXRzLnMpICtcbiAgICAgICAgICAgICsoZmlyc3RGb3JtYXRbNF0gfHwgMCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBsZXQgdG90YWwgPSAwO1xuICAgICAgICBjb25zdCByID0gLygtP1xcZCspKG1zfHN8bXxoKS9nO1xuICAgICAgICBsZXQgcnM7XG4gICAgICAgIHdoaWxlICgocnMgPSByLmV4ZWModGltZSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0b3RhbCArPSArcnNbMV0gKiB0aW1lVW5pdHNbcnNbMl1dO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0b3RhbDtcbiAgICB9XG59O1xuLyoqXG4gKiBQYXJzZXMgYSBkdXJhdGlvbiBzdHJpbmcgaW4gdGhlIGZvcm0gb2YgXCIxMjMuNDU2U1wiLCByZXR1cm5zIG1pbGxpc2Vjb25kcy5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdGltZVxuICogQHJldHVybnMge251bWJlcn1cbiAqL1xuZXhwb3J0cy5kdXJhdGlvblN0ciA9ICh0aW1lKSA9PiB7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICBjb25zdCByID0gLyhcXGQrKD86XFwuXFxkKyk/KShTfE18SCkvZztcbiAgICBsZXQgcnM7XG4gICAgd2hpbGUgKChycyA9IHIuZXhlYyh0aW1lKSkgIT09IG51bGwpIHtcbiAgICAgICAgdG90YWwgKz0gK3JzWzFdICogdGltZVVuaXRzW3JzWzJdLnRvTG93ZXJDYXNlKCldO1xuICAgIH1cbiAgICByZXR1cm4gdG90YWw7XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGFyc2UtdGltZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkdXJhdGlvblN0ciIsImh1bWFuU3RyIiwibnVtYmVyRm9ybWF0IiwidGltZUZvcm1hdCIsInRpbWVVbml0cyIsIm1zIiwicyIsIm0iLCJoIiwidGltZSIsInRlc3QiLCJmaXJzdEZvcm1hdCIsImV4ZWMiLCJ0b3RhbCIsInIiLCJycyIsInRvTG93ZXJDYXNlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/m3u8stream/dist/parse-time.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/m3u8stream/dist/queue.js":
/*!***********************************************!*\
  !*** ./node_modules/m3u8stream/dist/queue.js ***!
  \***********************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Queue = void 0;\nclass Queue {\n    /**\n     * A really simple queue with concurrency.\n     *\n     * @param {Function} worker\n     * @param {Object} options\n     * @param {!number} options.concurrency\n     */ constructor(worker, options = {}){\n        this._worker = worker;\n        this._concurrency = options.concurrency || 1;\n        this.tasks = [];\n        this.total = 0;\n        this.active = 0;\n    }\n    /**\n     * Push a task to the queue.\n     *\n     *  @param {T} item\n     *  @param {!Function} callback\n     */ push(item, callback) {\n        this.tasks.push({\n            item,\n            callback\n        });\n        this.total++;\n        this._next();\n    }\n    /**\n     * Process next job in queue.\n     */ _next() {\n        if (this.active >= this._concurrency || !this.tasks.length) {\n            return;\n        }\n        const { item, callback } = this.tasks.shift();\n        let callbackCalled = false;\n        this.active++;\n        this._worker(item, (err, result)=>{\n            if (callbackCalled) {\n                return;\n            }\n            this.active--;\n            callbackCalled = true;\n            callback === null || callback === void 0 ? void 0 : callback(err, result);\n            this._next();\n        });\n    }\n    /**\n     * Stops processing queued jobs.\n     */ die() {\n        this.tasks = [];\n    }\n}\nexports.Queue = Queue; //# sourceMappingURL=queue.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbTN1OHN0cmVhbS9kaXN0L3F1ZXVlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxhQUFhLEdBQUcsS0FBSztBQUNyQixNQUFNRTtJQUNGOzs7Ozs7S0FNQyxHQUNEQyxZQUFZQyxNQUFNLEVBQUVDLFVBQVUsQ0FBQyxDQUFDLENBQUU7UUFDOUIsSUFBSSxDQUFDQyxPQUFPLEdBQUdGO1FBQ2YsSUFBSSxDQUFDRyxZQUFZLEdBQUdGLFFBQVFHLFdBQVcsSUFBSTtRQUMzQyxJQUFJLENBQUNDLEtBQUssR0FBRyxFQUFFO1FBQ2YsSUFBSSxDQUFDQyxLQUFLLEdBQUc7UUFDYixJQUFJLENBQUNDLE1BQU0sR0FBRztJQUNsQjtJQUNBOzs7OztLQUtDLEdBQ0RDLEtBQUtDLElBQUksRUFBRUMsUUFBUSxFQUFFO1FBQ2pCLElBQUksQ0FBQ0wsS0FBSyxDQUFDRyxJQUFJLENBQUM7WUFBRUM7WUFBTUM7UUFBUztRQUNqQyxJQUFJLENBQUNKLEtBQUs7UUFDVixJQUFJLENBQUNLLEtBQUs7SUFDZDtJQUNBOztLQUVDLEdBQ0RBLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQ0osTUFBTSxJQUFJLElBQUksQ0FBQ0osWUFBWSxJQUFJLENBQUMsSUFBSSxDQUFDRSxLQUFLLENBQUNPLE1BQU0sRUFBRTtZQUN4RDtRQUNKO1FBQ0EsTUFBTSxFQUFFSCxJQUFJLEVBQUVDLFFBQVEsRUFBRSxHQUFHLElBQUksQ0FBQ0wsS0FBSyxDQUFDUSxLQUFLO1FBQzNDLElBQUlDLGlCQUFpQjtRQUNyQixJQUFJLENBQUNQLE1BQU07UUFDWCxJQUFJLENBQUNMLE9BQU8sQ0FBQ08sTUFBTSxDQUFDTSxLQUFLQztZQUNyQixJQUFJRixnQkFBZ0I7Z0JBQ2hCO1lBQ0o7WUFDQSxJQUFJLENBQUNQLE1BQU07WUFDWE8saUJBQWlCO1lBQ2pCSixhQUFhLFFBQVFBLGFBQWEsS0FBSyxJQUFJLEtBQUssSUFBSUEsU0FBU0ssS0FBS0M7WUFDbEUsSUFBSSxDQUFDTCxLQUFLO1FBQ2Q7SUFDSjtJQUNBOztLQUVDLEdBQ0RNLE1BQU07UUFDRixJQUFJLENBQUNaLEtBQUssR0FBRyxFQUFFO0lBQ25CO0FBQ0o7QUFDQVQsYUFBYSxHQUFHRSxPQUNoQixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yb3NlLy4vbm9kZV9tb2R1bGVzL20zdThzdHJlYW0vZGlzdC9xdWV1ZS5qcz83N2MxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5RdWV1ZSA9IHZvaWQgMDtcbmNsYXNzIFF1ZXVlIHtcbiAgICAvKipcbiAgICAgKiBBIHJlYWxseSBzaW1wbGUgcXVldWUgd2l0aCBjb25jdXJyZW5jeS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IHdvcmtlclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHshbnVtYmVyfSBvcHRpb25zLmNvbmN1cnJlbmN5XG4gICAgICovXG4gICAgY29uc3RydWN0b3Iod29ya2VyLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gd29ya2VyO1xuICAgICAgICB0aGlzLl9jb25jdXJyZW5jeSA9IG9wdGlvbnMuY29uY3VycmVuY3kgfHwgMTtcbiAgICAgICAgdGhpcy50YXNrcyA9IFtdO1xuICAgICAgICB0aGlzLnRvdGFsID0gMDtcbiAgICAgICAgdGhpcy5hY3RpdmUgPSAwO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQdXNoIGEgdGFzayB0byB0aGUgcXVldWUuXG4gICAgICpcbiAgICAgKiAgQHBhcmFtIHtUfSBpdGVtXG4gICAgICogIEBwYXJhbSB7IUZ1bmN0aW9ufSBjYWxsYmFja1xuICAgICAqL1xuICAgIHB1c2goaXRlbSwgY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy50YXNrcy5wdXNoKHsgaXRlbSwgY2FsbGJhY2sgfSk7XG4gICAgICAgIHRoaXMudG90YWwrKztcbiAgICAgICAgdGhpcy5fbmV4dCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQcm9jZXNzIG5leHQgam9iIGluIHF1ZXVlLlxuICAgICAqL1xuICAgIF9uZXh0KCkge1xuICAgICAgICBpZiAodGhpcy5hY3RpdmUgPj0gdGhpcy5fY29uY3VycmVuY3kgfHwgIXRoaXMudGFza3MubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyBpdGVtLCBjYWxsYmFjayB9ID0gdGhpcy50YXNrcy5zaGlmdCgpO1xuICAgICAgICBsZXQgY2FsbGJhY2tDYWxsZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hY3RpdmUrKztcbiAgICAgICAgdGhpcy5fd29ya2VyKGl0ZW0sIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKGNhbGxiYWNrQ2FsbGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hY3RpdmUtLTtcbiAgICAgICAgICAgIGNhbGxiYWNrQ2FsbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIGNhbGxiYWNrID09PSBudWxsIHx8IGNhbGxiYWNrID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjYWxsYmFjayhlcnIsIHJlc3VsdCk7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KCk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdG9wcyBwcm9jZXNzaW5nIHF1ZXVlZCBqb2JzLlxuICAgICAqL1xuICAgIGRpZSgpIHtcbiAgICAgICAgdGhpcy50YXNrcyA9IFtdO1xuICAgIH1cbn1cbmV4cG9ydHMuUXVldWUgPSBRdWV1ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXF1ZXVlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlF1ZXVlIiwiY29uc3RydWN0b3IiLCJ3b3JrZXIiLCJvcHRpb25zIiwiX3dvcmtlciIsIl9jb25jdXJyZW5jeSIsImNvbmN1cnJlbmN5IiwidGFza3MiLCJ0b3RhbCIsImFjdGl2ZSIsInB1c2giLCJpdGVtIiwiY2FsbGJhY2siLCJfbmV4dCIsImxlbmd0aCIsInNoaWZ0IiwiY2FsbGJhY2tDYWxsZWQiLCJlcnIiLCJyZXN1bHQiLCJkaWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/m3u8stream/dist/queue.js\n");

/***/ })

};
;