/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/ytdl-core";
exports.ids = ["vendor-chunks/ytdl-core"];
exports.modules = {

/***/ "(rsc)/./node_modules/ytdl-core/lib/cache.js":
/*!*********************************************!*\
  !*** ./node_modules/ytdl-core/lib/cache.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { setTimeout } = __webpack_require__(/*! timers */ \"timers\");\n// A cache that expires.\nmodule.exports = class Cache extends Map {\n    constructor(timeout = 1000){\n        super();\n        this.timeout = timeout;\n    }\n    set(key, value) {\n        if (this.has(key)) {\n            clearTimeout(super.get(key).tid);\n        }\n        super.set(key, {\n            tid: setTimeout(this.delete.bind(this, key), this.timeout).unref(),\n            value\n        });\n    }\n    get(key) {\n        let entry = super.get(key);\n        if (entry) {\n            return entry.value;\n        }\n        return null;\n    }\n    getOrSet(key, fn) {\n        if (this.has(key)) {\n            return this.get(key);\n        } else {\n            let value = fn();\n            this.set(key, value);\n            (async ()=>{\n                try {\n                    await value;\n                } catch (err) {\n                    this.delete(key);\n                }\n            })();\n            return value;\n        }\n    }\n    delete(key) {\n        let entry = super.get(key);\n        if (entry) {\n            clearTimeout(entry.tid);\n            super.delete(key);\n        }\n    }\n    clear() {\n        for (let entry of this.values()){\n            clearTimeout(entry.tid);\n        }\n        super.clear();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveXRkbC1jb3JlL2xpYi9jYWNoZS5qcyIsIm1hcHBpbmdzIjoiO0FBQUEsTUFBTSxFQUFFQSxVQUFVLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFFL0Isd0JBQXdCO0FBQ3hCQyxPQUFPQyxPQUFPLEdBQUcsTUFBTUMsY0FBY0M7SUFDbkNDLFlBQVlDLFVBQVUsSUFBSSxDQUFFO1FBQzFCLEtBQUs7UUFDTCxJQUFJLENBQUNBLE9BQU8sR0FBR0E7SUFDakI7SUFDQUMsSUFBSUMsR0FBRyxFQUFFQyxLQUFLLEVBQUU7UUFDZCxJQUFJLElBQUksQ0FBQ0MsR0FBRyxDQUFDRixNQUFNO1lBQ2pCRyxhQUFhLEtBQUssQ0FBQ0MsSUFBSUosS0FBS0ssR0FBRztRQUNqQztRQUNBLEtBQUssQ0FBQ04sSUFBSUMsS0FBSztZQUNiSyxLQUFLZCxXQUFXLElBQUksQ0FBQ2UsTUFBTSxDQUFDQyxJQUFJLENBQUMsSUFBSSxFQUFFUCxNQUFNLElBQUksQ0FBQ0YsT0FBTyxFQUFFVSxLQUFLO1lBQ2hFUDtRQUNGO0lBQ0Y7SUFDQUcsSUFBSUosR0FBRyxFQUFFO1FBQ1AsSUFBSVMsUUFBUSxLQUFLLENBQUNMLElBQUlKO1FBQ3RCLElBQUlTLE9BQU87WUFDVCxPQUFPQSxNQUFNUixLQUFLO1FBQ3BCO1FBQ0EsT0FBTztJQUNUO0lBQ0FTLFNBQVNWLEdBQUcsRUFBRVcsRUFBRSxFQUFFO1FBQ2hCLElBQUksSUFBSSxDQUFDVCxHQUFHLENBQUNGLE1BQU07WUFDakIsT0FBTyxJQUFJLENBQUNJLEdBQUcsQ0FBQ0o7UUFDbEIsT0FBTztZQUNMLElBQUlDLFFBQVFVO1lBQ1osSUFBSSxDQUFDWixHQUFHLENBQUNDLEtBQUtDO1lBQ2I7Z0JBQ0MsSUFBSTtvQkFDRixNQUFNQTtnQkFDUixFQUFFLE9BQU9XLEtBQUs7b0JBQ1osSUFBSSxDQUFDTixNQUFNLENBQUNOO2dCQUNkO1lBQ0Y7WUFDQSxPQUFPQztRQUNUO0lBQ0Y7SUFDQUssT0FBT04sR0FBRyxFQUFFO1FBQ1YsSUFBSVMsUUFBUSxLQUFLLENBQUNMLElBQUlKO1FBQ3RCLElBQUlTLE9BQU87WUFDVE4sYUFBYU0sTUFBTUosR0FBRztZQUN0QixLQUFLLENBQUNDLE9BQU9OO1FBQ2Y7SUFDRjtJQUNBYSxRQUFRO1FBQ04sS0FBSyxJQUFJSixTQUFTLElBQUksQ0FBQ0ssTUFBTSxHQUFJO1lBQy9CWCxhQUFhTSxNQUFNSixHQUFHO1FBQ3hCO1FBQ0EsS0FBSyxDQUFDUTtJQUNSO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yb3NlLy4vbm9kZV9tb2R1bGVzL3l0ZGwtY29yZS9saWIvY2FjaGUuanM/OTY2YSJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB7IHNldFRpbWVvdXQgfSA9IHJlcXVpcmUoJ3RpbWVycycpO1xuXG4vLyBBIGNhY2hlIHRoYXQgZXhwaXJlcy5cbm1vZHVsZS5leHBvcnRzID0gY2xhc3MgQ2FjaGUgZXh0ZW5kcyBNYXAge1xuICBjb25zdHJ1Y3Rvcih0aW1lb3V0ID0gMTAwMCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcbiAgfVxuICBzZXQoa2V5LCB2YWx1ZSkge1xuICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICBjbGVhclRpbWVvdXQoc3VwZXIuZ2V0KGtleSkudGlkKTtcbiAgICB9XG4gICAgc3VwZXIuc2V0KGtleSwge1xuICAgICAgdGlkOiBzZXRUaW1lb3V0KHRoaXMuZGVsZXRlLmJpbmQodGhpcywga2V5KSwgdGhpcy50aW1lb3V0KS51bnJlZigpLFxuICAgICAgdmFsdWUsXG4gICAgfSk7XG4gIH1cbiAgZ2V0KGtleSkge1xuICAgIGxldCBlbnRyeSA9IHN1cGVyLmdldChrZXkpO1xuICAgIGlmIChlbnRyeSkge1xuICAgICAgcmV0dXJuIGVudHJ5LnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBnZXRPclNldChrZXksIGZuKSB7XG4gICAgaWYgKHRoaXMuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldChrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgdmFsdWUgPSBmbigpO1xuICAgICAgdGhpcy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAoYXN5bmMoKSA9PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgdmFsdWU7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHRoaXMuZGVsZXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH0pKCk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICB9XG4gIGRlbGV0ZShrZXkpIHtcbiAgICBsZXQgZW50cnkgPSBzdXBlci5nZXQoa2V5KTtcbiAgICBpZiAoZW50cnkpIHtcbiAgICAgIGNsZWFyVGltZW91dChlbnRyeS50aWQpO1xuICAgICAgc3VwZXIuZGVsZXRlKGtleSk7XG4gICAgfVxuICB9XG4gIGNsZWFyKCkge1xuICAgIGZvciAobGV0IGVudHJ5IG9mIHRoaXMudmFsdWVzKCkpIHtcbiAgICAgIGNsZWFyVGltZW91dChlbnRyeS50aWQpO1xuICAgIH1cbiAgICBzdXBlci5jbGVhcigpO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInNldFRpbWVvdXQiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIkNhY2hlIiwiTWFwIiwiY29uc3RydWN0b3IiLCJ0aW1lb3V0Iiwic2V0Iiwia2V5IiwidmFsdWUiLCJoYXMiLCJjbGVhclRpbWVvdXQiLCJnZXQiLCJ0aWQiLCJkZWxldGUiLCJiaW5kIiwidW5yZWYiLCJlbnRyeSIsImdldE9yU2V0IiwiZm4iLCJlcnIiLCJjbGVhciIsInZhbHVlcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/cache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/format-utils.js":
/*!****************************************************!*\
  !*** ./node_modules/ytdl-core/lib/format-utils.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/ytdl-core/lib/utils.js\");\nconst FORMATS = __webpack_require__(/*! ./formats */ \"(rsc)/./node_modules/ytdl-core/lib/formats.js\");\n// Use these to help sort formats, higher index is better.\nconst audioEncodingRanks = [\n    \"mp4a\",\n    \"mp3\",\n    \"vorbis\",\n    \"aac\",\n    \"opus\",\n    \"flac\"\n];\nconst videoEncodingRanks = [\n    \"mp4v\",\n    \"avc1\",\n    \"Sorenson H.283\",\n    \"MPEG-4 Visual\",\n    \"VP8\",\n    \"VP9\",\n    \"H.264\"\n];\nconst getVideoBitrate = (format)=>format.bitrate || 0;\nconst getVideoEncodingRank = (format)=>videoEncodingRanks.findIndex((enc)=>format.codecs && format.codecs.includes(enc));\nconst getAudioBitrate = (format)=>format.audioBitrate || 0;\nconst getAudioEncodingRank = (format)=>audioEncodingRanks.findIndex((enc)=>format.codecs && format.codecs.includes(enc));\n/**\n * Sort formats by a list of functions.\n *\n * @param {Object} a\n * @param {Object} b\n * @param {Array.<Function>} sortBy\n * @returns {number}\n */ const sortFormatsBy = (a, b, sortBy)=>{\n    let res = 0;\n    for (let fn of sortBy){\n        res = fn(b) - fn(a);\n        if (res !== 0) {\n            break;\n        }\n    }\n    return res;\n};\nconst sortFormatsByVideo = (a, b)=>sortFormatsBy(a, b, [\n        (format)=>parseInt(format.qualityLabel),\n        getVideoBitrate,\n        getVideoEncodingRank\n    ]);\nconst sortFormatsByAudio = (a, b)=>sortFormatsBy(a, b, [\n        getAudioBitrate,\n        getAudioEncodingRank\n    ]);\n/**\n * Sort formats from highest quality to lowest.\n *\n * @param {Object} a\n * @param {Object} b\n * @returns {number}\n */ exports.sortFormats = (a, b)=>sortFormatsBy(a, b, [\n        // Formats with both video and audio are ranked highest.\n        (format)=>+!!format.isHLS,\n        (format)=>+!!format.isDashMPD,\n        (format)=>+(format.contentLength > 0),\n        (format)=>+(format.hasVideo && format.hasAudio),\n        (format)=>+format.hasVideo,\n        (format)=>parseInt(format.qualityLabel) || 0,\n        getVideoBitrate,\n        getAudioBitrate,\n        getVideoEncodingRank,\n        getAudioEncodingRank\n    ]);\n/**\n * Choose a format depending on the given options.\n *\n * @param {Array.<Object>} formats\n * @param {Object} options\n * @returns {Object}\n * @throws {Error} when no format matches the filter/format rules\n */ exports.chooseFormat = (formats, options)=>{\n    if (typeof options.format === \"object\") {\n        if (!options.format.url) {\n            throw Error(\"Invalid format given, did you use `ytdl.getInfo()`?\");\n        }\n        return options.format;\n    }\n    if (options.filter) {\n        formats = exports.filterFormats(formats, options.filter);\n    }\n    // We currently only support HLS-Formats for livestreams\n    // So we (now) remove all non-HLS streams\n    if (formats.some((fmt)=>fmt.isHLS)) {\n        formats = formats.filter((fmt)=>fmt.isHLS || !fmt.isLive);\n    }\n    let format;\n    const quality = options.quality || \"highest\";\n    switch(quality){\n        case \"highest\":\n            format = formats[0];\n            break;\n        case \"lowest\":\n            format = formats[formats.length - 1];\n            break;\n        case \"highestaudio\":\n            {\n                formats = exports.filterFormats(formats, \"audio\");\n                formats.sort(sortFormatsByAudio);\n                // Filter for only the best audio format\n                const bestAudioFormat = formats[0];\n                formats = formats.filter((f)=>sortFormatsByAudio(bestAudioFormat, f) === 0);\n                // Check for the worst video quality for the best audio quality and pick according\n                // This does not loose default sorting of video encoding and bitrate\n                const worstVideoQuality = formats.map((f)=>parseInt(f.qualityLabel) || 0).sort((a, b)=>a - b)[0];\n                format = formats.find((f)=>(parseInt(f.qualityLabel) || 0) === worstVideoQuality);\n                break;\n            }\n        case \"lowestaudio\":\n            formats = exports.filterFormats(formats, \"audio\");\n            formats.sort(sortFormatsByAudio);\n            format = formats[formats.length - 1];\n            break;\n        case \"highestvideo\":\n            {\n                formats = exports.filterFormats(formats, \"video\");\n                formats.sort(sortFormatsByVideo);\n                // Filter for only the best video format\n                const bestVideoFormat = formats[0];\n                formats = formats.filter((f)=>sortFormatsByVideo(bestVideoFormat, f) === 0);\n                // Check for the worst audio quality for the best video quality and pick according\n                // This does not loose default sorting of audio encoding and bitrate\n                const worstAudioQuality = formats.map((f)=>f.audioBitrate || 0).sort((a, b)=>a - b)[0];\n                format = formats.find((f)=>(f.audioBitrate || 0) === worstAudioQuality);\n                break;\n            }\n        case \"lowestvideo\":\n            formats = exports.filterFormats(formats, \"video\");\n            formats.sort(sortFormatsByVideo);\n            format = formats[formats.length - 1];\n            break;\n        default:\n            format = getFormatByQuality(quality, formats);\n            break;\n    }\n    if (!format) {\n        throw Error(`No such format found: ${quality}`);\n    }\n    return format;\n};\n/**\n * Gets a format based on quality or array of quality's\n *\n * @param {string|[string]} quality\n * @param {[Object]} formats\n * @returns {Object}\n */ const getFormatByQuality = (quality, formats)=>{\n    let getFormat = (itag)=>formats.find((format)=>`${format.itag}` === `${itag}`);\n    if (Array.isArray(quality)) {\n        return getFormat(quality.find((q)=>getFormat(q)));\n    } else {\n        return getFormat(quality);\n    }\n};\n/**\n * @param {Array.<Object>} formats\n * @param {Function} filter\n * @returns {Array.<Object>}\n */ exports.filterFormats = (formats, filter)=>{\n    let fn;\n    switch(filter){\n        case \"videoandaudio\":\n        case \"audioandvideo\":\n            fn = (format)=>format.hasVideo && format.hasAudio;\n            break;\n        case \"video\":\n            fn = (format)=>format.hasVideo;\n            break;\n        case \"videoonly\":\n            fn = (format)=>format.hasVideo && !format.hasAudio;\n            break;\n        case \"audio\":\n            fn = (format)=>format.hasAudio;\n            break;\n        case \"audioonly\":\n            fn = (format)=>!format.hasVideo && format.hasAudio;\n            break;\n        default:\n            if (typeof filter === \"function\") {\n                fn = filter;\n            } else {\n                throw TypeError(`Given filter (${filter}) is not supported`);\n            }\n    }\n    return formats.filter((format)=>!!format.url && fn(format));\n};\n/**\n * @param {Object} format\n * @returns {Object}\n */ exports.addFormatMeta = (format)=>{\n    format = Object.assign({}, FORMATS[format.itag], format);\n    format.hasVideo = !!format.qualityLabel;\n    format.hasAudio = !!format.audioBitrate;\n    format.container = format.mimeType ? format.mimeType.split(\";\")[0].split(\"/\")[1] : null;\n    format.codecs = format.mimeType ? utils.between(format.mimeType, 'codecs=\"', '\"') : null;\n    format.videoCodec = format.hasVideo && format.codecs ? format.codecs.split(\", \")[0] : null;\n    format.audioCodec = format.hasAudio && format.codecs ? format.codecs.split(\", \").slice(-1)[0] : null;\n    format.isLive = /\\bsource[/=]yt_live_broadcast\\b/.test(format.url);\n    format.isHLS = /\\/manifest\\/hls_(variant|playlist)\\//.test(format.url);\n    format.isDashMPD = /\\/manifest\\/dash\\//.test(format.url);\n    return format;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/format-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/formats.js":
/*!***********************************************!*\
  !*** ./node_modules/ytdl-core/lib/formats.js ***!
  \***********************************************/
/***/ ((module) => {

"use strict";
eval("/**\n * http://en.wikipedia.org/wiki/YouTube#Quality_and_formats\n */ \nmodule.exports = {\n    5: {\n        mimeType: 'video/flv; codecs=\"Sorenson H.283, mp3\"',\n        qualityLabel: \"240p\",\n        bitrate: 250000,\n        audioBitrate: 64\n    },\n    6: {\n        mimeType: 'video/flv; codecs=\"Sorenson H.263, mp3\"',\n        qualityLabel: \"270p\",\n        bitrate: 800000,\n        audioBitrate: 64\n    },\n    13: {\n        mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n        qualityLabel: null,\n        bitrate: 500000,\n        audioBitrate: null\n    },\n    17: {\n        mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n        qualityLabel: \"144p\",\n        bitrate: 50000,\n        audioBitrate: 24\n    },\n    18: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"360p\",\n        bitrate: 500000,\n        audioBitrate: 96\n    },\n    22: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"720p\",\n        bitrate: 2000000,\n        audioBitrate: 192\n    },\n    34: {\n        mimeType: 'video/flv; codecs=\"H.264, aac\"',\n        qualityLabel: \"360p\",\n        bitrate: 500000,\n        audioBitrate: 128\n    },\n    35: {\n        mimeType: 'video/flv; codecs=\"H.264, aac\"',\n        qualityLabel: \"480p\",\n        bitrate: 800000,\n        audioBitrate: 128\n    },\n    36: {\n        mimeType: 'video/3gp; codecs=\"MPEG-4 Visual, aac\"',\n        qualityLabel: \"240p\",\n        bitrate: 175000,\n        audioBitrate: 32\n    },\n    37: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"1080p\",\n        bitrate: 3000000,\n        audioBitrate: 192\n    },\n    38: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"3072p\",\n        bitrate: 3500000,\n        audioBitrate: 192\n    },\n    43: {\n        mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n        qualityLabel: \"360p\",\n        bitrate: 500000,\n        audioBitrate: 128\n    },\n    44: {\n        mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n        qualityLabel: \"480p\",\n        bitrate: 1000000,\n        audioBitrate: 128\n    },\n    45: {\n        mimeType: 'video/webm; codecs=\"VP8, vorbis\"',\n        qualityLabel: \"720p\",\n        bitrate: 2000000,\n        audioBitrate: 192\n    },\n    46: {\n        mimeType: 'audio/webm; codecs=\"vp8, vorbis\"',\n        qualityLabel: \"1080p\",\n        bitrate: null,\n        audioBitrate: 192\n    },\n    82: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"360p\",\n        bitrate: 500000,\n        audioBitrate: 96\n    },\n    83: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"240p\",\n        bitrate: 500000,\n        audioBitrate: 96\n    },\n    84: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"720p\",\n        bitrate: 2000000,\n        audioBitrate: 192\n    },\n    85: {\n        mimeType: 'video/mp4; codecs=\"H.264, aac\"',\n        qualityLabel: \"1080p\",\n        bitrate: 3000000,\n        audioBitrate: 192\n    },\n    91: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"144p\",\n        bitrate: 100000,\n        audioBitrate: 48\n    },\n    92: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"240p\",\n        bitrate: 150000,\n        audioBitrate: 48\n    },\n    93: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"360p\",\n        bitrate: 500000,\n        audioBitrate: 128\n    },\n    94: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"480p\",\n        bitrate: 800000,\n        audioBitrate: 128\n    },\n    95: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"720p\",\n        bitrate: 1500000,\n        audioBitrate: 256\n    },\n    96: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"1080p\",\n        bitrate: 2500000,\n        audioBitrate: 256\n    },\n    100: {\n        mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n        qualityLabel: \"360p\",\n        bitrate: null,\n        audioBitrate: 128\n    },\n    101: {\n        mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n        qualityLabel: \"360p\",\n        bitrate: null,\n        audioBitrate: 192\n    },\n    102: {\n        mimeType: 'audio/webm; codecs=\"VP8, vorbis\"',\n        qualityLabel: \"720p\",\n        bitrate: null,\n        audioBitrate: 192\n    },\n    120: {\n        mimeType: 'video/flv; codecs=\"H.264, aac\"',\n        qualityLabel: \"720p\",\n        bitrate: 2000000,\n        audioBitrate: 128\n    },\n    127: {\n        mimeType: 'audio/ts; codecs=\"aac\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 96\n    },\n    128: {\n        mimeType: 'audio/ts; codecs=\"aac\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 96\n    },\n    132: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"240p\",\n        bitrate: 150000,\n        audioBitrate: 48\n    },\n    133: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"240p\",\n        bitrate: 200000,\n        audioBitrate: null\n    },\n    134: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"360p\",\n        bitrate: 300000,\n        audioBitrate: null\n    },\n    135: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"480p\",\n        bitrate: 500000,\n        audioBitrate: null\n    },\n    136: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"720p\",\n        bitrate: 1000000,\n        audioBitrate: null\n    },\n    137: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"1080p\",\n        bitrate: 2500000,\n        audioBitrate: null\n    },\n    138: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"4320p\",\n        bitrate: 13500000,\n        audioBitrate: null\n    },\n    139: {\n        mimeType: 'audio/mp4; codecs=\"aac\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 48\n    },\n    140: {\n        mimeType: 'audio/m4a; codecs=\"aac\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 128\n    },\n    141: {\n        mimeType: 'audio/mp4; codecs=\"aac\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 256\n    },\n    151: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"720p\",\n        bitrate: 50000,\n        audioBitrate: 24\n    },\n    160: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"144p\",\n        bitrate: 100000,\n        audioBitrate: null\n    },\n    171: {\n        mimeType: 'audio/webm; codecs=\"vorbis\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 128\n    },\n    172: {\n        mimeType: 'audio/webm; codecs=\"vorbis\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 192\n    },\n    242: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"240p\",\n        bitrate: 100000,\n        audioBitrate: null\n    },\n    243: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"360p\",\n        bitrate: 250000,\n        audioBitrate: null\n    },\n    244: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"480p\",\n        bitrate: 500000,\n        audioBitrate: null\n    },\n    247: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"720p\",\n        bitrate: 700000,\n        audioBitrate: null\n    },\n    248: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"1080p\",\n        bitrate: 1500000,\n        audioBitrate: null\n    },\n    249: {\n        mimeType: 'audio/webm; codecs=\"opus\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 48\n    },\n    250: {\n        mimeType: 'audio/webm; codecs=\"opus\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 64\n    },\n    251: {\n        mimeType: 'audio/webm; codecs=\"opus\"',\n        qualityLabel: null,\n        bitrate: null,\n        audioBitrate: 160\n    },\n    264: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"1440p\",\n        bitrate: 4000000,\n        audioBitrate: null\n    },\n    266: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"2160p\",\n        bitrate: 12500000,\n        audioBitrate: null\n    },\n    271: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"1440p\",\n        bitrate: 9000000,\n        audioBitrate: null\n    },\n    272: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"4320p\",\n        bitrate: 20000000,\n        audioBitrate: null\n    },\n    278: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"144p 30fps\",\n        bitrate: 80000,\n        audioBitrate: null\n    },\n    298: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"720p\",\n        bitrate: 3000000,\n        audioBitrate: null\n    },\n    299: {\n        mimeType: 'video/mp4; codecs=\"H.264\"',\n        qualityLabel: \"1080p\",\n        bitrate: 5500000,\n        audioBitrate: null\n    },\n    300: {\n        mimeType: 'video/ts; codecs=\"H.264, aac\"',\n        qualityLabel: \"720p\",\n        bitrate: 1318000,\n        audioBitrate: 48\n    },\n    302: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"720p HFR\",\n        bitrate: 2500000,\n        audioBitrate: null\n    },\n    303: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"1080p HFR\",\n        bitrate: 5000000,\n        audioBitrate: null\n    },\n    308: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"1440p HFR\",\n        bitrate: 10000000,\n        audioBitrate: null\n    },\n    313: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"2160p\",\n        bitrate: 13000000,\n        audioBitrate: null\n    },\n    315: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"2160p HFR\",\n        bitrate: 20000000,\n        audioBitrate: null\n    },\n    330: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"144p HDR, HFR\",\n        bitrate: 80000,\n        audioBitrate: null\n    },\n    331: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"240p HDR, HFR\",\n        bitrate: 100000,\n        audioBitrate: null\n    },\n    332: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"360p HDR, HFR\",\n        bitrate: 250000,\n        audioBitrate: null\n    },\n    333: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"240p HDR, HFR\",\n        bitrate: 500000,\n        audioBitrate: null\n    },\n    334: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"720p HDR, HFR\",\n        bitrate: 1000000,\n        audioBitrate: null\n    },\n    335: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"1080p HDR, HFR\",\n        bitrate: 1500000,\n        audioBitrate: null\n    },\n    336: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"1440p HDR, HFR\",\n        bitrate: 5000000,\n        audioBitrate: null\n    },\n    337: {\n        mimeType: 'video/webm; codecs=\"VP9\"',\n        qualityLabel: \"2160p HDR, HFR\",\n        bitrate: 12000000,\n        audioBitrate: null\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/formats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/index.js":
/*!*********************************************!*\
  !*** ./node_modules/ytdl-core/lib/index.js ***!
  \*********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst PassThrough = (__webpack_require__(/*! stream */ \"stream\").PassThrough);\nconst getInfo = __webpack_require__(/*! ./info */ \"(rsc)/./node_modules/ytdl-core/lib/info.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/ytdl-core/lib/utils.js\");\nconst formatUtils = __webpack_require__(/*! ./format-utils */ \"(rsc)/./node_modules/ytdl-core/lib/format-utils.js\");\nconst urlUtils = __webpack_require__(/*! ./url-utils */ \"(rsc)/./node_modules/ytdl-core/lib/url-utils.js\");\nconst sig = __webpack_require__(/*! ./sig */ \"(rsc)/./node_modules/ytdl-core/lib/sig.js\");\nconst miniget = __webpack_require__(/*! miniget */ \"(rsc)/./node_modules/miniget/dist/index.js\");\nconst m3u8stream = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\nconst { parseTimestamp } = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\n/**\n * @param {string} link\n * @param {!Object} options\n * @returns {ReadableStream}\n */ const ytdl = (link, options)=>{\n    const stream = createStream(options);\n    ytdl.getInfo(link, options).then((info)=>{\n        downloadFromInfoCallback(stream, info, options);\n    }, stream.emit.bind(stream, \"error\"));\n    return stream;\n};\nmodule.exports = ytdl;\nytdl.getBasicInfo = getInfo.getBasicInfo;\nytdl.getInfo = getInfo.getInfo;\nytdl.chooseFormat = formatUtils.chooseFormat;\nytdl.filterFormats = formatUtils.filterFormats;\nytdl.validateID = urlUtils.validateID;\nytdl.validateURL = urlUtils.validateURL;\nytdl.getURLVideoID = urlUtils.getURLVideoID;\nytdl.getVideoID = urlUtils.getVideoID;\nytdl.cache = {\n    sig: sig.cache,\n    info: getInfo.cache,\n    watch: getInfo.watchPageCache,\n    cookie: getInfo.cookieCache\n};\nytdl.version = (__webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/ytdl-core/package.json\").version);\nconst createStream = (options)=>{\n    const stream = new PassThrough({\n        highWaterMark: options && options.highWaterMark || 1024 * 512\n    });\n    stream._destroy = ()=>{\n        stream.destroyed = true;\n    };\n    return stream;\n};\nconst pipeAndSetEvents = (req, stream, end)=>{\n    // Forward events from the request to the stream.\n    [\n        \"abort\",\n        \"request\",\n        \"response\",\n        \"error\",\n        \"redirect\",\n        \"retry\",\n        \"reconnect\"\n    ].forEach((event)=>{\n        req.prependListener(event, stream.emit.bind(stream, event));\n    });\n    req.pipe(stream, {\n        end\n    });\n};\n/**\n * Chooses a format to download.\n *\n * @param {stream.Readable} stream\n * @param {Object} info\n * @param {Object} options\n */ const downloadFromInfoCallback = (stream, info, options)=>{\n    options = options || {};\n    let err = utils.playError(info.player_response, [\n        \"UNPLAYABLE\",\n        \"LIVE_STREAM_OFFLINE\",\n        \"LOGIN_REQUIRED\"\n    ]);\n    if (err) {\n        stream.emit(\"error\", err);\n        return;\n    }\n    if (!info.formats.length) {\n        stream.emit(\"error\", Error(\"This video is unavailable\"));\n        return;\n    }\n    let format;\n    try {\n        format = formatUtils.chooseFormat(info.formats, options);\n    } catch (e) {\n        stream.emit(\"error\", e);\n        return;\n    }\n    stream.emit(\"info\", info, format);\n    if (stream.destroyed) {\n        return;\n    }\n    let contentLength, downloaded = 0;\n    const ondata = (chunk)=>{\n        downloaded += chunk.length;\n        stream.emit(\"progress\", chunk.length, downloaded, contentLength);\n    };\n    if (options.IPv6Block) {\n        options.requestOptions = Object.assign({}, options.requestOptions, {\n            family: 6,\n            localAddress: utils.getRandomIPv6(options.IPv6Block)\n        });\n    }\n    // Download the file in chunks, in this case the default is 10MB,\n    // anything over this will cause youtube to throttle the download\n    const dlChunkSize = options.dlChunkSize || 1024 * 1024 * 10;\n    let req;\n    let shouldEnd = true;\n    if (format.isHLS || format.isDashMPD) {\n        req = m3u8stream(format.url, {\n            chunkReadahead: +info.live_chunk_readahead,\n            begin: options.begin || format.isLive && Date.now(),\n            liveBuffer: options.liveBuffer,\n            requestOptions: options.requestOptions,\n            parser: format.isDashMPD ? \"dash-mpd\" : \"m3u8\",\n            id: format.itag\n        });\n        req.on(\"progress\", (segment, totalSegments)=>{\n            stream.emit(\"progress\", segment.size, segment.num, totalSegments);\n        });\n        pipeAndSetEvents(req, stream, shouldEnd);\n    } else {\n        const requestOptions = Object.assign({}, options.requestOptions, {\n            maxReconnects: 6,\n            maxRetries: 3,\n            backoff: {\n                inc: 500,\n                max: 10000\n            }\n        });\n        let shouldBeChunked = dlChunkSize !== 0 && (!format.hasAudio || !format.hasVideo);\n        if (shouldBeChunked) {\n            let start = options.range && options.range.start || 0;\n            let end = start + dlChunkSize;\n            const rangeEnd = options.range && options.range.end;\n            contentLength = options.range ? (rangeEnd ? rangeEnd + 1 : parseInt(format.contentLength)) - start : parseInt(format.contentLength);\n            const getNextChunk = ()=>{\n                if (!rangeEnd && end >= contentLength) end = 0;\n                if (rangeEnd && end > rangeEnd) end = rangeEnd;\n                shouldEnd = !end || end === rangeEnd;\n                requestOptions.headers = Object.assign({}, requestOptions.headers, {\n                    Range: `bytes=${start}-${end || \"\"}`\n                });\n                req = miniget(format.url, requestOptions);\n                req.on(\"data\", ondata);\n                req.on(\"end\", ()=>{\n                    if (stream.destroyed) {\n                        return;\n                    }\n                    if (end && end !== rangeEnd) {\n                        start = end + 1;\n                        end += dlChunkSize;\n                        getNextChunk();\n                    }\n                });\n                pipeAndSetEvents(req, stream, shouldEnd);\n            };\n            getNextChunk();\n        } else {\n            // Audio only and video only formats don't support begin\n            if (options.begin) {\n                format.url += `&begin=${parseTimestamp(options.begin)}`;\n            }\n            if (options.range && (options.range.start || options.range.end)) {\n                requestOptions.headers = Object.assign({}, requestOptions.headers, {\n                    Range: `bytes=${options.range.start || \"0\"}-${options.range.end || \"\"}`\n                });\n            }\n            req = miniget(format.url, requestOptions);\n            req.on(\"response\", (res)=>{\n                if (stream.destroyed) {\n                    return;\n                }\n                contentLength = contentLength || parseInt(res.headers[\"content-length\"]);\n            });\n            req.on(\"data\", ondata);\n            pipeAndSetEvents(req, stream, shouldEnd);\n        }\n    }\n    stream._destroy = ()=>{\n        stream.destroyed = true;\n        req.destroy();\n        req.end();\n    };\n};\n/**\n * Can be used to download video after its `info` is gotten through\n * `ytdl.getInfo()`. In case the user might want to look at the\n * `info` object before deciding to download.\n *\n * @param {Object} info\n * @param {!Object} options\n * @returns {ReadableStream}\n */ ytdl.downloadFromInfo = (info, options)=>{\n    const stream = createStream(options);\n    if (!info.full) {\n        throw Error(\"Cannot use `ytdl.downloadFromInfo()` when called \" + \"with info from `ytdl.getBasicInfo()`\");\n    }\n    setImmediate(()=>{\n        downloadFromInfoCallback(stream, info, options);\n    });\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/info-extras.js":
/*!***************************************************!*\
  !*** ./node_modules/ytdl-core/lib/info-extras.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/ytdl-core/lib/utils.js\");\nconst qs = __webpack_require__(/*! querystring */ \"querystring\");\nconst { parseTimestamp } = __webpack_require__(/*! m3u8stream */ \"(rsc)/./node_modules/m3u8stream/dist/index.js\");\nconst BASE_URL = \"https://www.youtube.com/watch?v=\";\nconst TITLE_TO_CATEGORY = {\n    song: {\n        name: \"Music\",\n        url: \"https://music.youtube.com/\"\n    }\n};\nconst getText = (obj)=>obj ? obj.runs ? obj.runs[0].text : obj.simpleText : null;\n/**\n * Get video media.\n *\n * @param {Object} info\n * @returns {Object}\n */ exports.getMedia = (info)=>{\n    let media = {};\n    let results = [];\n    try {\n        results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n    } catch (err) {\n    // Do nothing\n    }\n    let result = results.find((v)=>v.videoSecondaryInfoRenderer);\n    if (!result) {\n        return {};\n    }\n    try {\n        let metadataRows = (result.metadataRowContainer || result.videoSecondaryInfoRenderer.metadataRowContainer).metadataRowContainerRenderer.rows;\n        for (let row of metadataRows){\n            if (row.metadataRowRenderer) {\n                let title = getText(row.metadataRowRenderer.title).toLowerCase();\n                let contents = row.metadataRowRenderer.contents[0];\n                media[title] = getText(contents);\n                let runs = contents.runs;\n                if (runs && runs[0].navigationEndpoint) {\n                    media[`${title}_url`] = new URL(runs[0].navigationEndpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n                }\n                if (title in TITLE_TO_CATEGORY) {\n                    media.category = TITLE_TO_CATEGORY[title].name;\n                    media.category_url = TITLE_TO_CATEGORY[title].url;\n                }\n            } else if (row.richMetadataRowRenderer) {\n                let contents = row.richMetadataRowRenderer.contents;\n                let boxArt = contents.filter((meta)=>meta.richMetadataRenderer.style === \"RICH_METADATA_RENDERER_STYLE_BOX_ART\");\n                for (let { richMetadataRenderer } of boxArt){\n                    let meta = richMetadataRenderer;\n                    media.year = getText(meta.subtitle);\n                    let type = getText(meta.callToAction).split(\" \")[1];\n                    media[type] = getText(meta.title);\n                    media[`${type}_url`] = new URL(meta.endpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n                    media.thumbnails = meta.thumbnail.thumbnails;\n                }\n                let topic = contents.filter((meta)=>meta.richMetadataRenderer.style === \"RICH_METADATA_RENDERER_STYLE_TOPIC\");\n                for (let { richMetadataRenderer } of topic){\n                    let meta = richMetadataRenderer;\n                    media.category = getText(meta.title);\n                    media.category_url = new URL(meta.endpoint.commandMetadata.webCommandMetadata.url, BASE_URL).toString();\n                }\n            }\n        }\n    } catch (err) {\n    // Do nothing.\n    }\n    return media;\n};\nconst isVerified = (badges)=>!!(badges && badges.find((b)=>b.metadataBadgeRenderer.tooltip === \"Verified\"));\n/**\n * Get video author.\n *\n * @param {Object} info\n * @returns {Object}\n */ exports.getAuthor = (info)=>{\n    let channelId, thumbnails = [], subscriberCount, verified = false;\n    try {\n        let results = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n        let v = results.find((v2)=>v2.videoSecondaryInfoRenderer && v2.videoSecondaryInfoRenderer.owner && v2.videoSecondaryInfoRenderer.owner.videoOwnerRenderer);\n        let videoOwnerRenderer = v.videoSecondaryInfoRenderer.owner.videoOwnerRenderer;\n        channelId = videoOwnerRenderer.navigationEndpoint.browseEndpoint.browseId;\n        thumbnails = videoOwnerRenderer.thumbnail.thumbnails.map((thumbnail)=>{\n            thumbnail.url = new URL(thumbnail.url, BASE_URL).toString();\n            return thumbnail;\n        });\n        subscriberCount = utils.parseAbbreviatedNumber(getText(videoOwnerRenderer.subscriberCountText));\n        verified = isVerified(videoOwnerRenderer.badges);\n    } catch (err) {\n    // Do nothing.\n    }\n    try {\n        let videoDetails = info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer;\n        let id = videoDetails && videoDetails.channelId || channelId || info.player_response.videoDetails.channelId;\n        let author = {\n            id: id,\n            name: videoDetails ? videoDetails.ownerChannelName : info.player_response.videoDetails.author,\n            user: videoDetails ? videoDetails.ownerProfileUrl.split(\"/\").slice(-1)[0] : null,\n            channel_url: `https://www.youtube.com/channel/${id}`,\n            external_channel_url: videoDetails ? `https://www.youtube.com/channel/${videoDetails.externalChannelId}` : \"\",\n            user_url: videoDetails ? new URL(videoDetails.ownerProfileUrl, BASE_URL).toString() : \"\",\n            thumbnails,\n            verified,\n            subscriber_count: subscriberCount\n        };\n        if (thumbnails.length) {\n            utils.deprecate(author, \"avatar\", author.thumbnails[0].url, \"author.avatar\", \"author.thumbnails[0].url\");\n        }\n        return author;\n    } catch (err) {\n        return {};\n    }\n};\nconst parseRelatedVideo = (details, rvsParams)=>{\n    if (!details) return;\n    try {\n        let viewCount = getText(details.viewCountText);\n        let shortViewCount = getText(details.shortViewCountText);\n        let rvsDetails = rvsParams.find((elem)=>elem.id === details.videoId);\n        if (!/^\\d/.test(shortViewCount)) {\n            shortViewCount = rvsDetails && rvsDetails.short_view_count_text || \"\";\n        }\n        viewCount = (/^\\d/.test(viewCount) ? viewCount : shortViewCount).split(\" \")[0];\n        let browseEndpoint = details.shortBylineText.runs[0].navigationEndpoint.browseEndpoint;\n        let channelId = browseEndpoint.browseId;\n        let name = getText(details.shortBylineText);\n        let user = (browseEndpoint.canonicalBaseUrl || \"\").split(\"/\").slice(-1)[0];\n        let video = {\n            id: details.videoId,\n            title: getText(details.title),\n            published: getText(details.publishedTimeText),\n            author: {\n                id: channelId,\n                name,\n                user,\n                channel_url: `https://www.youtube.com/channel/${channelId}`,\n                user_url: `https://www.youtube.com/user/${user}`,\n                thumbnails: details.channelThumbnail.thumbnails.map((thumbnail)=>{\n                    thumbnail.url = new URL(thumbnail.url, BASE_URL).toString();\n                    return thumbnail;\n                }),\n                verified: isVerified(details.ownerBadges),\n                [Symbol.toPrimitive] () {\n                    console.warn(`\\`relatedVideo.author\\` will be removed in a near future release, ` + `use \\`relatedVideo.author.name\\` instead.`);\n                    return video.author.name;\n                }\n            },\n            short_view_count_text: shortViewCount.split(\" \")[0],\n            view_count: viewCount.replace(/,/g, \"\"),\n            length_seconds: details.lengthText ? Math.floor(parseTimestamp(getText(details.lengthText)) / 1000) : rvsParams && `${rvsParams.length_seconds}`,\n            thumbnails: details.thumbnail.thumbnails,\n            richThumbnails: details.richThumbnail ? details.richThumbnail.movingThumbnailRenderer.movingThumbnailDetails.thumbnails : [],\n            isLive: !!(details.badges && details.badges.find((b)=>b.metadataBadgeRenderer.label === \"LIVE NOW\"))\n        };\n        utils.deprecate(video, \"author_thumbnail\", video.author.thumbnails[0].url, \"relatedVideo.author_thumbnail\", \"relatedVideo.author.thumbnails[0].url\");\n        utils.deprecate(video, \"ucid\", video.author.id, \"relatedVideo.ucid\", \"relatedVideo.author.id\");\n        utils.deprecate(video, \"video_thumbnail\", video.thumbnails[0].url, \"relatedVideo.video_thumbnail\", \"relatedVideo.thumbnails[0].url\");\n        return video;\n    } catch (err) {\n    // Skip.\n    }\n};\n/**\n * Get related videos.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */ exports.getRelatedVideos = (info)=>{\n    let rvsParams = [], secondaryResults = [];\n    try {\n        rvsParams = info.response.webWatchNextResponseExtensionData.relatedVideoArgs.split(\",\").map((e)=>qs.parse(e));\n    } catch (err) {\n    // Do nothing.\n    }\n    try {\n        secondaryResults = info.response.contents.twoColumnWatchNextResults.secondaryResults.secondaryResults.results;\n    } catch (err) {\n        return [];\n    }\n    let videos = [];\n    for (let result of secondaryResults || []){\n        let details = result.compactVideoRenderer;\n        if (details) {\n            let video = parseRelatedVideo(details, rvsParams);\n            if (video) videos.push(video);\n        } else {\n            let autoplay = result.compactAutoplayRenderer || result.itemSectionRenderer;\n            if (!autoplay || !Array.isArray(autoplay.contents)) continue;\n            for (let content of autoplay.contents){\n                let video = parseRelatedVideo(content.compactVideoRenderer, rvsParams);\n                if (video) videos.push(video);\n            }\n        }\n    }\n    return videos;\n};\n/**\n * Get like count.\n *\n * @param {Object} info\n * @returns {number}\n */ exports.getLikes = (info)=>{\n    try {\n        let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n        let video = contents.find((r)=>r.videoPrimaryInfoRenderer);\n        let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n        let like = buttons.find((b)=>b.toggleButtonRenderer && b.toggleButtonRenderer.defaultIcon.iconType === \"LIKE\");\n        return parseInt(like.toggleButtonRenderer.defaultText.accessibility.accessibilityData.label.replace(/\\D+/g, \"\"));\n    } catch (err) {\n        return null;\n    }\n};\n/**\n * Get dislike count.\n *\n * @param {Object} info\n * @returns {number}\n */ exports.getDislikes = (info)=>{\n    try {\n        let contents = info.response.contents.twoColumnWatchNextResults.results.results.contents;\n        let video = contents.find((r)=>r.videoPrimaryInfoRenderer);\n        let buttons = video.videoPrimaryInfoRenderer.videoActions.menuRenderer.topLevelButtons;\n        let dislike = buttons.find((b)=>b.toggleButtonRenderer && b.toggleButtonRenderer.defaultIcon.iconType === \"DISLIKE\");\n        return parseInt(dislike.toggleButtonRenderer.defaultText.accessibility.accessibilityData.label.replace(/\\D+/g, \"\"));\n    } catch (err) {\n        return null;\n    }\n};\n/**\n * Cleans up a few fields on `videoDetails`.\n *\n * @param {Object} videoDetails\n * @param {Object} info\n * @returns {Object}\n */ exports.cleanVideoDetails = (videoDetails, info)=>{\n    videoDetails.thumbnails = videoDetails.thumbnail.thumbnails;\n    delete videoDetails.thumbnail;\n    utils.deprecate(videoDetails, \"thumbnail\", {\n        thumbnails: videoDetails.thumbnails\n    }, \"videoDetails.thumbnail.thumbnails\", \"videoDetails.thumbnails\");\n    videoDetails.description = videoDetails.shortDescription || getText(videoDetails.description);\n    delete videoDetails.shortDescription;\n    utils.deprecate(videoDetails, \"shortDescription\", videoDetails.description, \"videoDetails.shortDescription\", \"videoDetails.description\");\n    // Use more reliable `lengthSeconds` from `playerMicroformatRenderer`.\n    videoDetails.lengthSeconds = info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer.lengthSeconds || info.player_response.videoDetails.lengthSeconds;\n    return videoDetails;\n};\n/**\n * Get storyboards info.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */ exports.getStoryboards = (info)=>{\n    const parts = info.player_response.storyboards && info.player_response.storyboards.playerStoryboardSpecRenderer && info.player_response.storyboards.playerStoryboardSpecRenderer.spec && info.player_response.storyboards.playerStoryboardSpecRenderer.spec.split(\"|\");\n    if (!parts) return [];\n    const url = new URL(parts.shift());\n    return parts.map((part, i)=>{\n        let [thumbnailWidth, thumbnailHeight, thumbnailCount, columns, rows, interval, nameReplacement, sigh] = part.split(\"#\");\n        url.searchParams.set(\"sigh\", sigh);\n        thumbnailCount = parseInt(thumbnailCount, 10);\n        columns = parseInt(columns, 10);\n        rows = parseInt(rows, 10);\n        const storyboardCount = Math.ceil(thumbnailCount / (columns * rows));\n        return {\n            templateUrl: url.toString().replace(\"$L\", i).replace(\"$N\", nameReplacement),\n            thumbnailWidth: parseInt(thumbnailWidth, 10),\n            thumbnailHeight: parseInt(thumbnailHeight, 10),\n            thumbnailCount,\n            interval: parseInt(interval, 10),\n            columns,\n            rows,\n            storyboardCount\n        };\n    });\n};\n/**\n * Get chapters info.\n *\n * @param {Object} info\n * @returns {Array.<Object>}\n */ exports.getChapters = (info)=>{\n    const playerOverlayRenderer = info.response && info.response.playerOverlays && info.response.playerOverlays.playerOverlayRenderer;\n    const playerBar = playerOverlayRenderer && playerOverlayRenderer.decoratedPlayerBarRenderer && playerOverlayRenderer.decoratedPlayerBarRenderer.decoratedPlayerBarRenderer && playerOverlayRenderer.decoratedPlayerBarRenderer.decoratedPlayerBarRenderer.playerBar;\n    const markersMap = playerBar && playerBar.multiMarkersPlayerBarRenderer && playerBar.multiMarkersPlayerBarRenderer.markersMap;\n    const marker = Array.isArray(markersMap) && markersMap.find((m)=>m.value && Array.isArray(m.value.chapters));\n    if (!marker) return [];\n    const chapters = marker.value.chapters;\n    return chapters.map((chapter)=>({\n            title: getText(chapter.chapterRenderer.title),\n            start_time: chapter.chapterRenderer.timeRangeStartMillis / 1000\n        }));\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/info-extras.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/info.js":
/*!********************************************!*\
  !*** ./node_modules/ytdl-core/lib/info.js ***!
  \********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst sax = __webpack_require__(/*! sax */ \"(rsc)/./node_modules/sax/lib/sax.js\");\nconst miniget = __webpack_require__(/*! miniget */ \"(rsc)/./node_modules/miniget/dist/index.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/ytdl-core/lib/utils.js\");\n// Forces Node JS version of setTimeout for Electron based applications\nconst { setTimeout } = __webpack_require__(/*! timers */ \"timers\");\nconst formatUtils = __webpack_require__(/*! ./format-utils */ \"(rsc)/./node_modules/ytdl-core/lib/format-utils.js\");\nconst urlUtils = __webpack_require__(/*! ./url-utils */ \"(rsc)/./node_modules/ytdl-core/lib/url-utils.js\");\nconst extras = __webpack_require__(/*! ./info-extras */ \"(rsc)/./node_modules/ytdl-core/lib/info-extras.js\");\nconst sig = __webpack_require__(/*! ./sig */ \"(rsc)/./node_modules/ytdl-core/lib/sig.js\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/ytdl-core/lib/cache.js\");\nconst BASE_URL = \"https://www.youtube.com/watch?v=\";\n// Cached for storing basic/full info.\nexports.cache = new Cache();\nexports.cookieCache = new Cache(1000 * 60 * 60 * 24);\nexports.watchPageCache = new Cache();\n// Cache for cver used in getVideoInfoPage\nlet cver = \"2.20210622.10.00\";\n// Special error class used to determine if an error is unrecoverable,\n// as in, ytdl-core should not try again to fetch the video metadata.\n// In this case, the video is usually unavailable in some way.\nclass UnrecoverableError extends Error {\n}\n// List of URLs that show up in `notice_url` for age restricted videos.\nconst AGE_RESTRICTED_URLS = [\n    \"support.google.com/youtube/?p=age_restrictions\",\n    \"youtube.com/t/community_guidelines\"\n];\n/**\n * Gets info from a video without getting additional formats.\n *\n * @param {string} id\n * @param {Object} options\n * @returns {Promise<Object>}\n*/ exports.getBasicInfo = async (id, options)=>{\n    if (options.IPv6Block) {\n        options.requestOptions = Object.assign({}, options.requestOptions, {\n            family: 6,\n            localAddress: utils.getRandomIPv6(options.IPv6Block)\n        });\n    }\n    const retryOptions = Object.assign({}, miniget.defaultOptions, options.requestOptions);\n    options.requestOptions = Object.assign({}, options.requestOptions, {});\n    options.requestOptions.headers = Object.assign({}, {\n        // eslint-disable-next-line max-len\n        \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.101 Safari/537.36\"\n    }, options.requestOptions.headers);\n    const validate = (info)=>{\n        let playErr = utils.playError(info.player_response, [\n            \"ERROR\"\n        ], UnrecoverableError);\n        let privateErr = privateVideoError(info.player_response);\n        if (playErr || privateErr) {\n            throw playErr || privateErr;\n        }\n        return info && info.player_response && (info.player_response.streamingData || isRental(info.player_response) || isNotYetBroadcasted(info.player_response));\n    };\n    let info = await pipeline([\n        id,\n        options\n    ], validate, retryOptions, [\n        getWatchHTMLPage,\n        getWatchJSONPage,\n        getVideoInfoPage\n    ]);\n    Object.assign(info, {\n        formats: parseFormats(info.player_response),\n        related_videos: extras.getRelatedVideos(info)\n    });\n    // Add additional properties to info.\n    const media = extras.getMedia(info);\n    const additional = {\n        author: extras.getAuthor(info),\n        media,\n        likes: extras.getLikes(info),\n        dislikes: extras.getDislikes(info),\n        age_restricted: !!(media && AGE_RESTRICTED_URLS.some((url)=>Object.values(media).some((v)=>typeof v === \"string\" && v.includes(url)))),\n        // Give the standard link to the video.\n        video_url: BASE_URL + id,\n        storyboards: extras.getStoryboards(info),\n        chapters: extras.getChapters(info)\n    };\n    info.videoDetails = extras.cleanVideoDetails(Object.assign({}, info.player_response && info.player_response.microformat && info.player_response.microformat.playerMicroformatRenderer, info.player_response && info.player_response.videoDetails, additional), info);\n    return info;\n};\nconst privateVideoError = (player_response)=>{\n    let playability = player_response && player_response.playabilityStatus;\n    if (playability && playability.status === \"LOGIN_REQUIRED\" && playability.messages && playability.messages.filter((m)=>/This is a private video/.test(m)).length) {\n        return new UnrecoverableError(playability.reason || playability.messages && playability.messages[0]);\n    } else {\n        return null;\n    }\n};\nconst isRental = (player_response)=>{\n    let playability = player_response.playabilityStatus;\n    return playability && playability.status === \"UNPLAYABLE\" && playability.errorScreen && playability.errorScreen.playerLegacyDesktopYpcOfferRenderer;\n};\nconst isNotYetBroadcasted = (player_response)=>{\n    let playability = player_response.playabilityStatus;\n    return playability && playability.status === \"LIVE_STREAM_OFFLINE\";\n};\nconst getWatchHTMLURL = (id, options)=>`${BASE_URL + id}&hl=${options.lang || \"en\"}`;\nconst getWatchHTMLPageBody = (id, options)=>{\n    const url = getWatchHTMLURL(id, options);\n    return exports.watchPageCache.getOrSet(url, ()=>utils.exposedMiniget(url, options).text());\n};\nconst EMBED_URL = \"https://www.youtube.com/embed/\";\nconst getEmbedPageBody = (id, options)=>{\n    const embedUrl = `${EMBED_URL + id}?hl=${options.lang || \"en\"}`;\n    return utils.exposedMiniget(embedUrl, options).text();\n};\nconst getHTML5player = (body)=>{\n    let html5playerRes = /<script\\s+src=\"([^\"]+)\"(?:\\s+type=\"text\\/javascript\")?\\s+name=\"player_ias\\/base\"\\s*>|\"jsUrl\":\"([^\"]+)\"/.exec(body);\n    return html5playerRes ? html5playerRes[1] || html5playerRes[2] : null;\n};\nconst getIdentityToken = (id, options, key, throwIfNotFound)=>exports.cookieCache.getOrSet(key, async ()=>{\n        let page = await getWatchHTMLPageBody(id, options);\n        let match = page.match(/([\"'])ID_TOKEN\\1[:,]\\s?\"([^\"]+)\"/);\n        if (!match && throwIfNotFound) {\n            throw new UnrecoverableError(\"Cookie header used in request, but unable to find YouTube identity token\");\n        }\n        return match && match[2];\n    });\n/**\n * Goes through each endpoint in the pipeline, retrying on failure if the error is recoverable.\n * If unable to succeed with one endpoint, moves onto the next one.\n *\n * @param {Array.<Object>} args\n * @param {Function} validate\n * @param {Object} retryOptions\n * @param {Array.<Function>} endpoints\n * @returns {[Object, Object, Object]}\n */ const pipeline = async (args, validate, retryOptions, endpoints)=>{\n    let info;\n    for (let func of endpoints){\n        try {\n            const newInfo = await retryFunc(func, args.concat([\n                info\n            ]), retryOptions);\n            if (newInfo.player_response) {\n                newInfo.player_response.videoDetails = assign(info && info.player_response && info.player_response.videoDetails, newInfo.player_response.videoDetails);\n                newInfo.player_response = assign(info && info.player_response, newInfo.player_response);\n            }\n            info = assign(info, newInfo);\n            if (validate(info, false)) {\n                break;\n            }\n        } catch (err) {\n            if (err instanceof UnrecoverableError || func === endpoints[endpoints.length - 1]) {\n                throw err;\n            }\n        // Unable to find video metadata... so try next endpoint.\n        }\n    }\n    return info;\n};\n/**\n * Like Object.assign(), but ignores `null` and `undefined` from `source`.\n *\n * @param {Object} target\n * @param {Object} source\n * @returns {Object}\n */ const assign = (target, source)=>{\n    if (!target || !source) {\n        return target || source;\n    }\n    for (let [key, value] of Object.entries(source)){\n        if (value !== null && value !== undefined) {\n            target[key] = value;\n        }\n    }\n    return target;\n};\n/**\n * Given a function, calls it with `args` until it's successful,\n * or until it encounters an unrecoverable error.\n * Currently, any error from miniget is considered unrecoverable. Errors such as\n * too many redirects, invalid URL, status code 404, status code 502.\n *\n * @param {Function} func\n * @param {Array.<Object>} args\n * @param {Object} options\n * @param {number} options.maxRetries\n * @param {Object} options.backoff\n * @param {number} options.backoff.inc\n */ const retryFunc = async (func, args, options)=>{\n    let currentTry = 0, result;\n    while(currentTry <= options.maxRetries){\n        try {\n            result = await func(...args);\n            break;\n        } catch (err) {\n            if (err instanceof UnrecoverableError || err instanceof miniget.MinigetError && err.statusCode < 500 || currentTry >= options.maxRetries) {\n                throw err;\n            }\n            let wait = Math.min(++currentTry * options.backoff.inc, options.backoff.max);\n            await new Promise((resolve)=>setTimeout(resolve, wait));\n        }\n    }\n    return result;\n};\nconst jsonClosingChars = /^[)\\]}'\\s]+/;\nconst parseJSON = (source, varName, json)=>{\n    if (!json || typeof json === \"object\") {\n        return json;\n    } else {\n        try {\n            json = json.replace(jsonClosingChars, \"\");\n            return JSON.parse(json);\n        } catch (err) {\n            throw Error(`Error parsing ${varName} in ${source}: ${err.message}`);\n        }\n    }\n};\nconst findJSON = (source, varName, body, left, right, prependJSON)=>{\n    let jsonStr = utils.between(body, left, right);\n    if (!jsonStr) {\n        throw Error(`Could not find ${varName} in ${source}`);\n    }\n    return parseJSON(source, varName, utils.cutAfterJS(`${prependJSON}${jsonStr}`));\n};\nconst findPlayerResponse = (source, info)=>{\n    const player_response = info && (info.args && info.args.player_response || info.player_response || info.playerResponse || info.embedded_player_response);\n    return parseJSON(source, \"player_response\", player_response);\n};\nconst getWatchJSONURL = (id, options)=>`${getWatchHTMLURL(id, options)}&pbj=1`;\nconst getWatchJSONPage = async (id, options)=>{\n    const reqOptions = Object.assign({\n        headers: {}\n    }, options.requestOptions);\n    let cookie = reqOptions.headers.Cookie || reqOptions.headers.cookie;\n    reqOptions.headers = Object.assign({\n        \"x-youtube-client-name\": \"1\",\n        \"x-youtube-client-version\": cver,\n        \"x-youtube-identity-token\": exports.cookieCache.get(cookie || \"browser\") || \"\"\n    }, reqOptions.headers);\n    const setIdentityToken = async (key, throwIfNotFound)=>{\n        if (reqOptions.headers[\"x-youtube-identity-token\"]) {\n            return;\n        }\n        reqOptions.headers[\"x-youtube-identity-token\"] = await getIdentityToken(id, options, key, throwIfNotFound);\n    };\n    if (cookie) {\n        await setIdentityToken(cookie, true);\n    }\n    const jsonUrl = getWatchJSONURL(id, options);\n    const body = await utils.exposedMiniget(jsonUrl, options, reqOptions).text();\n    let parsedBody = parseJSON(\"watch.json\", \"body\", body);\n    if (parsedBody.reload === \"now\") {\n        await setIdentityToken(\"browser\", false);\n    }\n    if (parsedBody.reload === \"now\" || !Array.isArray(parsedBody)) {\n        throw Error(\"Unable to retrieve video metadata in watch.json\");\n    }\n    let info = parsedBody.reduce((part, curr)=>Object.assign(curr, part), {});\n    info.player_response = findPlayerResponse(\"watch.json\", info);\n    info.html5player = info.player && info.player.assets && info.player.assets.js;\n    return info;\n};\nconst getWatchHTMLPage = async (id, options)=>{\n    let body = await getWatchHTMLPageBody(id, options);\n    let info = {\n        page: \"watch\"\n    };\n    try {\n        cver = utils.between(body, '{\"key\":\"cver\",\"value\":\"', '\"}');\n        info.player_response = findJSON(\"watch.html\", \"player_response\", body, /\\bytInitialPlayerResponse\\s*=\\s*\\{/i, \"</script>\", \"{\");\n    } catch (err) {\n        let args = findJSON(\"watch.html\", \"player_response\", body, /\\bytplayer\\.config\\s*=\\s*{/, \"</script>\", \"{\");\n        info.player_response = findPlayerResponse(\"watch.html\", args);\n    }\n    info.response = findJSON(\"watch.html\", \"response\", body, /\\bytInitialData(\"\\])?\\s*=\\s*\\{/i, \"</script>\", \"{\");\n    info.html5player = getHTML5player(body);\n    return info;\n};\nconst INFO_HOST = \"www.youtube.com\";\nconst INFO_PATH = \"/get_video_info\";\nconst VIDEO_EURL = \"https://youtube.googleapis.com/v/\";\nconst getVideoInfoPage = async (id, options)=>{\n    const url = new URL(`https://${INFO_HOST}${INFO_PATH}`);\n    url.searchParams.set(\"video_id\", id);\n    url.searchParams.set(\"c\", \"TVHTML5\");\n    url.searchParams.set(\"cver\", `7${cver.substr(1)}`);\n    url.searchParams.set(\"eurl\", VIDEO_EURL + id);\n    url.searchParams.set(\"ps\", \"default\");\n    url.searchParams.set(\"gl\", \"US\");\n    url.searchParams.set(\"hl\", options.lang || \"en\");\n    url.searchParams.set(\"html5\", \"1\");\n    const body = await utils.exposedMiniget(url.toString(), options).text();\n    let info = querystring.parse(body);\n    info.player_response = findPlayerResponse(\"get_video_info\", info);\n    return info;\n};\n/**\n * @param {Object} player_response\n * @returns {Array.<Object>}\n */ const parseFormats = (player_response)=>{\n    let formats = [];\n    if (player_response && player_response.streamingData) {\n        formats = formats.concat(player_response.streamingData.formats || []).concat(player_response.streamingData.adaptiveFormats || []);\n    }\n    return formats;\n};\n/**\n * Gets info from a video additional formats and deciphered URLs.\n *\n * @param {string} id\n * @param {Object} options\n * @returns {Promise<Object>}\n */ exports.getInfo = async (id, options)=>{\n    let info = await exports.getBasicInfo(id, options);\n    const hasManifest = info.player_response && info.player_response.streamingData && (info.player_response.streamingData.dashManifestUrl || info.player_response.streamingData.hlsManifestUrl);\n    let funcs = [];\n    if (info.formats.length) {\n        info.html5player = info.html5player || getHTML5player(await getWatchHTMLPageBody(id, options)) || getHTML5player(await getEmbedPageBody(id, options));\n        if (!info.html5player) {\n            throw Error(\"Unable to find html5player file\");\n        }\n        const html5player = new URL(info.html5player, BASE_URL).toString();\n        funcs.push(sig.decipherFormats(info.formats, html5player, options));\n    }\n    if (hasManifest && info.player_response.streamingData.dashManifestUrl) {\n        let url = info.player_response.streamingData.dashManifestUrl;\n        funcs.push(getDashManifest(url, options));\n    }\n    if (hasManifest && info.player_response.streamingData.hlsManifestUrl) {\n        let url = info.player_response.streamingData.hlsManifestUrl;\n        funcs.push(getM3U8(url, options));\n    }\n    let results = await Promise.all(funcs);\n    info.formats = Object.values(Object.assign({}, ...results));\n    info.formats = info.formats.map(formatUtils.addFormatMeta);\n    info.formats.sort(formatUtils.sortFormats);\n    info.full = true;\n    return info;\n};\n/**\n * Gets additional DASH formats.\n *\n * @param {string} url\n * @param {Object} options\n * @returns {Promise<Array.<Object>>}\n */ const getDashManifest = (url, options)=>new Promise((resolve, reject)=>{\n        let formats = {};\n        const parser = sax.parser(false);\n        parser.onerror = reject;\n        let adaptationSet;\n        parser.onopentag = (node)=>{\n            if (node.name === \"ADAPTATIONSET\") {\n                adaptationSet = node.attributes;\n            } else if (node.name === \"REPRESENTATION\") {\n                const itag = parseInt(node.attributes.ID);\n                if (!isNaN(itag)) {\n                    formats[url] = Object.assign({\n                        itag,\n                        url,\n                        bitrate: parseInt(node.attributes.BANDWIDTH),\n                        mimeType: `${adaptationSet.MIMETYPE}; codecs=\"${node.attributes.CODECS}\"`\n                    }, node.attributes.HEIGHT ? {\n                        width: parseInt(node.attributes.WIDTH),\n                        height: parseInt(node.attributes.HEIGHT),\n                        fps: parseInt(node.attributes.FRAMERATE)\n                    } : {\n                        audioSampleRate: node.attributes.AUDIOSAMPLINGRATE\n                    });\n                }\n            }\n        };\n        parser.onend = ()=>{\n            resolve(formats);\n        };\n        const req = utils.exposedMiniget(new URL(url, BASE_URL).toString(), options);\n        req.setEncoding(\"utf8\");\n        req.on(\"error\", reject);\n        req.on(\"data\", (chunk)=>{\n            parser.write(chunk);\n        });\n        req.on(\"end\", parser.close.bind(parser));\n    });\n/**\n * Gets additional formats.\n *\n * @param {string} url\n * @param {Object} options\n * @returns {Promise<Array.<Object>>}\n */ const getM3U8 = async (url, options)=>{\n    url = new URL(url, BASE_URL);\n    const body = await utils.exposedMiniget(url.toString(), options).text();\n    let formats = {};\n    body.split(\"\\n\").filter((line)=>/^https?:\\/\\//.test(line)).forEach((line)=>{\n        const itag = parseInt(line.match(/\\/itag\\/(\\d+)\\//)[1]);\n        formats[line] = {\n            itag,\n            url: line\n        };\n    });\n    return formats;\n};\n// Cache get info functions.\n// In case a user wants to get a video's info before downloading.\nfor (let funcName of [\n    \"getBasicInfo\",\n    \"getInfo\"\n]){\n    /**\n   * @param {string} link\n   * @param {Object} options\n   * @returns {Promise<Object>}\n   */ const func = exports[funcName];\n    exports[funcName] = async (link, options = {})=>{\n        utils.checkForUpdates();\n        let id = await urlUtils.getVideoID(link);\n        const key = [\n            funcName,\n            id,\n            options.lang\n        ].join(\"-\");\n        return exports.cache.getOrSet(key, ()=>func(id, options));\n    };\n}\n// Export a few helpers.\nexports.validateID = urlUtils.validateID;\nexports.validateURL = urlUtils.validateURL;\nexports.getURLVideoID = urlUtils.getURLVideoID;\nexports.getVideoID = urlUtils.getVideoID;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/info.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/sig.js":
/*!*******************************************!*\
  !*** ./node_modules/ytdl-core/lib/sig.js ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const querystring = __webpack_require__(/*! querystring */ \"querystring\");\nconst Cache = __webpack_require__(/*! ./cache */ \"(rsc)/./node_modules/ytdl-core/lib/cache.js\");\nconst utils = __webpack_require__(/*! ./utils */ \"(rsc)/./node_modules/ytdl-core/lib/utils.js\");\nconst vm = __webpack_require__(/*! vm */ \"vm\");\n// A shared cache to keep track of html5player js functions.\nexports.cache = new Cache();\n/**\n * Extract signature deciphering and n parameter transform functions from html5player file.\n *\n * @param {string} html5playerfile\n * @param {Object} options\n * @returns {Promise<Array.<string>>}\n */ exports.getFunctions = (html5playerfile, options)=>exports.cache.getOrSet(html5playerfile, async ()=>{\n        const body = await utils.exposedMiniget(html5playerfile, options).text();\n        const functions = exports.extractFunctions(body);\n        if (!functions || !functions.length) {\n            throw Error(\"Could not extract functions\");\n        }\n        exports.cache.set(html5playerfile, functions);\n        return functions;\n    });\n/**\n * Extracts the actions that should be taken to decipher a signature\n * and tranform the n parameter\n *\n * @param {string} body\n * @returns {Array.<string>}\n */ exports.extractFunctions = (body)=>{\n    const functions = [];\n    const extractManipulations = (caller)=>{\n        const functionName = utils.between(caller, `a=a.split(\"\");`, `.`);\n        if (!functionName) return \"\";\n        const functionStart = `var ${functionName}={`;\n        const ndx = body.indexOf(functionStart);\n        if (ndx < 0) return \"\";\n        const subBody = body.slice(ndx + functionStart.length - 1);\n        return `var ${functionName}=${utils.cutAfterJS(subBody)}`;\n    };\n    const extractDecipher = ()=>{\n        const functionName = utils.between(body, `a.set(\"alr\",\"yes\");c&&(c=`, `(decodeURIC`);\n        if (functionName && functionName.length) {\n            const functionStart = `${functionName}=function(a)`;\n            const ndx = body.indexOf(functionStart);\n            if (ndx >= 0) {\n                const subBody = body.slice(ndx + functionStart.length);\n                let functionBody = `var ${functionStart}${utils.cutAfterJS(subBody)}`;\n                functionBody = `${extractManipulations(functionBody)};${functionBody};${functionName}(sig);`;\n                functions.push(functionBody);\n            }\n        }\n    };\n    const extractNCode = ()=>{\n        let functionName = utils.between(body, `&&(b=a.get(\"n\"))&&(b=`, `(b)`);\n        if (functionName.includes(\"[\")) functionName = utils.between(body, `var ${functionName.split(\"[\")[0]}=[`, `]`);\n        if (functionName && functionName.length) {\n            const functionStart = `${functionName}=function(a)`;\n            const ndx = body.indexOf(functionStart);\n            if (ndx >= 0) {\n                const subBody = body.slice(ndx + functionStart.length);\n                const functionBody = `var ${functionStart}${utils.cutAfterJS(subBody)};${functionName}(ncode);`;\n                functions.push(functionBody);\n            }\n        }\n    };\n    extractDecipher();\n    extractNCode();\n    return functions;\n};\n/**\n * Apply decipher and n-transform to individual format\n *\n * @param {Object} format\n * @param {vm.Script} decipherScript\n * @param {vm.Script} nTransformScript\n */ exports.setDownloadURL = (format, decipherScript, nTransformScript)=>{\n    const decipher = (url)=>{\n        const args = querystring.parse(url);\n        if (!args.s || !decipherScript) return args.url;\n        const components = new URL(decodeURIComponent(args.url));\n        components.searchParams.set(args.sp ? args.sp : \"signature\", decipherScript.runInNewContext({\n            sig: decodeURIComponent(args.s)\n        }));\n        return components.toString();\n    };\n    const ncode = (url)=>{\n        const components = new URL(decodeURIComponent(url));\n        const n = components.searchParams.get(\"n\");\n        if (!n || !nTransformScript) return url;\n        components.searchParams.set(\"n\", nTransformScript.runInNewContext({\n            ncode: n\n        }));\n        return components.toString();\n    };\n    const cipher = !format.url;\n    const url = format.url || format.signatureCipher || format.cipher;\n    format.url = cipher ? ncode(decipher(url)) : ncode(url);\n    delete format.signatureCipher;\n    delete format.cipher;\n};\n/**\n * Applies decipher and n parameter transforms to all format URL's.\n *\n * @param {Array.<Object>} formats\n * @param {string} html5player\n * @param {Object} options\n */ exports.decipherFormats = async (formats, html5player, options)=>{\n    let decipheredFormats = {};\n    let functions = await exports.getFunctions(html5player, options);\n    const decipherScript = functions.length ? new vm.Script(functions[0]) : null;\n    const nTransformScript = functions.length > 1 ? new vm.Script(functions[1]) : null;\n    formats.forEach((format)=>{\n        exports.setDownloadURL(format, decipherScript, nTransformScript);\n        decipheredFormats[format.url] = format;\n    });\n    return decipheredFormats;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/sig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/url-utils.js":
/*!*************************************************!*\
  !*** ./node_modules/ytdl-core/lib/url-utils.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * Get video ID.\n *\n * There are a few type of video URL formats.\n *  - https://www.youtube.com/watch?v=VIDEO_ID\n *  - https://m.youtube.com/watch?v=VIDEO_ID\n *  - https://youtu.be/VIDEO_ID\n *  - https://www.youtube.com/v/VIDEO_ID\n *  - https://www.youtube.com/embed/VIDEO_ID\n *  - https://music.youtube.com/watch?v=VIDEO_ID\n *  - https://gaming.youtube.com/watch?v=VIDEO_ID\n *\n * @param {string} link\n * @return {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */ const validQueryDomains = new Set([\n    \"youtube.com\",\n    \"www.youtube.com\",\n    \"m.youtube.com\",\n    \"music.youtube.com\",\n    \"gaming.youtube.com\"\n]);\nconst validPathDomains = /^https?:\\/\\/(youtu\\.be\\/|(www\\.)?youtube\\.com\\/(embed|v|shorts)\\/)/;\nexports.getURLVideoID = (link)=>{\n    const parsed = new URL(link.trim());\n    let id = parsed.searchParams.get(\"v\");\n    if (validPathDomains.test(link.trim()) && !id) {\n        const paths = parsed.pathname.split(\"/\");\n        id = parsed.host === \"youtu.be\" ? paths[1] : paths[2];\n    } else if (parsed.hostname && !validQueryDomains.has(parsed.hostname)) {\n        throw Error(\"Not a YouTube domain\");\n    }\n    if (!id) {\n        throw Error(`No video id found: \"${link}\"`);\n    }\n    id = id.substring(0, 11);\n    if (!exports.validateID(id)) {\n        throw TypeError(`Video id (${id}) does not match expected ` + `format (${idRegex.toString()})`);\n    }\n    return id;\n};\n/**\n * Gets video ID either from a url or by checking if the given string\n * matches the video ID format.\n *\n * @param {string} str\n * @returns {string}\n * @throws {Error} If unable to find a id\n * @throws {TypeError} If videoid doesn't match specs\n */ const urlRegex = /^https?:\\/\\//;\nexports.getVideoID = (str)=>{\n    if (exports.validateID(str)) {\n        return str;\n    } else if (urlRegex.test(str.trim())) {\n        return exports.getURLVideoID(str);\n    } else {\n        throw Error(`No video id found: ${str}`);\n    }\n};\n/**\n * Returns true if given id satifies YouTube's id format.\n *\n * @param {string} id\n * @return {boolean}\n */ const idRegex = /^[a-zA-Z0-9-_]{11}$/;\nexports.validateID = (id)=>idRegex.test(id.trim());\n/**\n * Checks wether the input string includes a valid id.\n *\n * @param {string} string\n * @returns {boolean}\n */ exports.validateURL = (string)=>{\n    try {\n        exports.getURLVideoID(string);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMveXRkbC1jb3JlL2xpYi91cmwtdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Q0FnQkMsR0FDRCxNQUFNQSxvQkFBb0IsSUFBSUMsSUFBSTtJQUNoQztJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFDRCxNQUFNQyxtQkFBbUI7QUFDekJDLHFCQUFxQixHQUFHRSxDQUFBQTtJQUN0QixNQUFNQyxTQUFTLElBQUlDLElBQUlGLEtBQUtHLElBQUk7SUFDaEMsSUFBSUMsS0FBS0gsT0FBT0ksWUFBWSxDQUFDQyxHQUFHLENBQUM7SUFDakMsSUFBSVQsaUJBQWlCVSxJQUFJLENBQUNQLEtBQUtHLElBQUksT0FBTyxDQUFDQyxJQUFJO1FBQzdDLE1BQU1JLFFBQVFQLE9BQU9RLFFBQVEsQ0FBQ0MsS0FBSyxDQUFDO1FBQ3BDTixLQUFLSCxPQUFPVSxJQUFJLEtBQUssYUFBYUgsS0FBSyxDQUFDLEVBQUUsR0FBR0EsS0FBSyxDQUFDLEVBQUU7SUFDdkQsT0FBTyxJQUFJUCxPQUFPVyxRQUFRLElBQUksQ0FBQ2pCLGtCQUFrQmtCLEdBQUcsQ0FBQ1osT0FBT1csUUFBUSxHQUFHO1FBQ3JFLE1BQU1FLE1BQU07SUFDZDtJQUNBLElBQUksQ0FBQ1YsSUFBSTtRQUNQLE1BQU1VLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRWQsS0FBSyxDQUFDLENBQUM7SUFDNUM7SUFDQUksS0FBS0EsR0FBR1csU0FBUyxDQUFDLEdBQUc7SUFDckIsSUFBSSxDQUFDakIsUUFBUWtCLFVBQVUsQ0FBQ1osS0FBSztRQUMzQixNQUFNYSxVQUFVLENBQUMsVUFBVSxFQUFFYixHQUFHLDBCQUEwQixDQUFDLEdBQ3pELENBQUMsUUFBUSxFQUFFYyxRQUFRQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO0lBQ3BDO0lBQ0EsT0FBT2Y7QUFDVDtBQUdBOzs7Ozs7OztDQVFDLEdBQ0QsTUFBTWdCLFdBQVc7QUFDakJ0QixrQkFBa0IsR0FBR3dCLENBQUFBO0lBQ25CLElBQUl4QixRQUFRa0IsVUFBVSxDQUFDTSxNQUFNO1FBQzNCLE9BQU9BO0lBQ1QsT0FBTyxJQUFJRixTQUFTYixJQUFJLENBQUNlLElBQUluQixJQUFJLEtBQUs7UUFDcEMsT0FBT0wsUUFBUUMsYUFBYSxDQUFDdUI7SUFDL0IsT0FBTztRQUNMLE1BQU1SLE1BQU0sQ0FBQyxtQkFBbUIsRUFBRVEsSUFBSSxDQUFDO0lBQ3pDO0FBQ0Y7QUFHQTs7Ozs7Q0FLQyxHQUNELE1BQU1KLFVBQVU7QUFDaEJwQixrQkFBa0IsR0FBR00sQ0FBQUEsS0FBTWMsUUFBUVgsSUFBSSxDQUFDSCxHQUFHRCxJQUFJO0FBRy9DOzs7OztDQUtDLEdBQ0RMLG1CQUFtQixHQUFHMEIsQ0FBQUE7SUFDcEIsSUFBSTtRQUNGMUIsUUFBUUMsYUFBYSxDQUFDeUI7UUFDdEIsT0FBTztJQUNULEVBQUUsT0FBT0MsR0FBRztRQUNWLE9BQU87SUFDVDtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcm9zZS8uL25vZGVfbW9kdWxlcy95dGRsLWNvcmUvbGliL3VybC11dGlscy5qcz80MmM2Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogR2V0IHZpZGVvIElELlxuICpcbiAqIFRoZXJlIGFyZSBhIGZldyB0eXBlIG9mIHZpZGVvIFVSTCBmb3JtYXRzLlxuICogIC0gaHR0cHM6Ly93d3cueW91dHViZS5jb20vd2F0Y2g/dj1WSURFT19JRFxuICogIC0gaHR0cHM6Ly9tLnlvdXR1YmUuY29tL3dhdGNoP3Y9VklERU9fSURcbiAqICAtIGh0dHBzOi8veW91dHUuYmUvVklERU9fSURcbiAqICAtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3YvVklERU9fSURcbiAqICAtIGh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL2VtYmVkL1ZJREVPX0lEXG4gKiAgLSBodHRwczovL211c2ljLnlvdXR1YmUuY29tL3dhdGNoP3Y9VklERU9fSURcbiAqICAtIGh0dHBzOi8vZ2FtaW5nLnlvdXR1YmUuY29tL3dhdGNoP3Y9VklERU9fSURcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gbGlua1xuICogQHJldHVybiB7c3RyaW5nfVxuICogQHRocm93cyB7RXJyb3J9IElmIHVuYWJsZSB0byBmaW5kIGEgaWRcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gSWYgdmlkZW9pZCBkb2Vzbid0IG1hdGNoIHNwZWNzXG4gKi9cbmNvbnN0IHZhbGlkUXVlcnlEb21haW5zID0gbmV3IFNldChbXG4gICd5b3V0dWJlLmNvbScsXG4gICd3d3cueW91dHViZS5jb20nLFxuICAnbS55b3V0dWJlLmNvbScsXG4gICdtdXNpYy55b3V0dWJlLmNvbScsXG4gICdnYW1pbmcueW91dHViZS5jb20nLFxuXSk7XG5jb25zdCB2YWxpZFBhdGhEb21haW5zID0gL15odHRwcz86XFwvXFwvKHlvdXR1XFwuYmVcXC98KHd3d1xcLik/eW91dHViZVxcLmNvbVxcLyhlbWJlZHx2fHNob3J0cylcXC8pLztcbmV4cG9ydHMuZ2V0VVJMVmlkZW9JRCA9IGxpbmsgPT4ge1xuICBjb25zdCBwYXJzZWQgPSBuZXcgVVJMKGxpbmsudHJpbSgpKTtcbiAgbGV0IGlkID0gcGFyc2VkLnNlYXJjaFBhcmFtcy5nZXQoJ3YnKTtcbiAgaWYgKHZhbGlkUGF0aERvbWFpbnMudGVzdChsaW5rLnRyaW0oKSkgJiYgIWlkKSB7XG4gICAgY29uc3QgcGF0aHMgPSBwYXJzZWQucGF0aG5hbWUuc3BsaXQoJy8nKTtcbiAgICBpZCA9IHBhcnNlZC5ob3N0ID09PSAneW91dHUuYmUnID8gcGF0aHNbMV0gOiBwYXRoc1syXTtcbiAgfSBlbHNlIGlmIChwYXJzZWQuaG9zdG5hbWUgJiYgIXZhbGlkUXVlcnlEb21haW5zLmhhcyhwYXJzZWQuaG9zdG5hbWUpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ05vdCBhIFlvdVR1YmUgZG9tYWluJyk7XG4gIH1cbiAgaWYgKCFpZCkge1xuICAgIHRocm93IEVycm9yKGBObyB2aWRlbyBpZCBmb3VuZDogXCIke2xpbmt9XCJgKTtcbiAgfVxuICBpZCA9IGlkLnN1YnN0cmluZygwLCAxMSk7XG4gIGlmICghZXhwb3J0cy52YWxpZGF0ZUlEKGlkKSkge1xuICAgIHRocm93IFR5cGVFcnJvcihgVmlkZW8gaWQgKCR7aWR9KSBkb2VzIG5vdCBtYXRjaCBleHBlY3RlZCBgICtcbiAgICAgIGBmb3JtYXQgKCR7aWRSZWdleC50b1N0cmluZygpfSlgKTtcbiAgfVxuICByZXR1cm4gaWQ7XG59O1xuXG5cbi8qKlxuICogR2V0cyB2aWRlbyBJRCBlaXRoZXIgZnJvbSBhIHVybCBvciBieSBjaGVja2luZyBpZiB0aGUgZ2l2ZW4gc3RyaW5nXG4gKiBtYXRjaGVzIHRoZSB2aWRlbyBJRCBmb3JtYXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICogQHJldHVybnMge3N0cmluZ31cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiB1bmFibGUgdG8gZmluZCBhIGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IElmIHZpZGVvaWQgZG9lc24ndCBtYXRjaCBzcGVjc1xuICovXG5jb25zdCB1cmxSZWdleCA9IC9eaHR0cHM/OlxcL1xcLy87XG5leHBvcnRzLmdldFZpZGVvSUQgPSBzdHIgPT4ge1xuICBpZiAoZXhwb3J0cy52YWxpZGF0ZUlEKHN0cikpIHtcbiAgICByZXR1cm4gc3RyO1xuICB9IGVsc2UgaWYgKHVybFJlZ2V4LnRlc3Qoc3RyLnRyaW0oKSkpIHtcbiAgICByZXR1cm4gZXhwb3J0cy5nZXRVUkxWaWRlb0lEKHN0cik7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoYE5vIHZpZGVvIGlkIGZvdW5kOiAke3N0cn1gKTtcbiAgfVxufTtcblxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBnaXZlbiBpZCBzYXRpZmllcyBZb3VUdWJlJ3MgaWQgZm9ybWF0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZFxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuY29uc3QgaWRSZWdleCA9IC9eW2EtekEtWjAtOS1fXXsxMX0kLztcbmV4cG9ydHMudmFsaWRhdGVJRCA9IGlkID0+IGlkUmVnZXgudGVzdChpZC50cmltKCkpO1xuXG5cbi8qKlxuICogQ2hlY2tzIHdldGhlciB0aGUgaW5wdXQgc3RyaW5nIGluY2x1ZGVzIGEgdmFsaWQgaWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmV4cG9ydHMudmFsaWRhdGVVUkwgPSBzdHJpbmcgPT4ge1xuICB0cnkge1xuICAgIGV4cG9ydHMuZ2V0VVJMVmlkZW9JRChzdHJpbmcpO1xuICAgIHJldHVybiB0cnVlO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59O1xuIl0sIm5hbWVzIjpbInZhbGlkUXVlcnlEb21haW5zIiwiU2V0IiwidmFsaWRQYXRoRG9tYWlucyIsImV4cG9ydHMiLCJnZXRVUkxWaWRlb0lEIiwibGluayIsInBhcnNlZCIsIlVSTCIsInRyaW0iLCJpZCIsInNlYXJjaFBhcmFtcyIsImdldCIsInRlc3QiLCJwYXRocyIsInBhdGhuYW1lIiwic3BsaXQiLCJob3N0IiwiaG9zdG5hbWUiLCJoYXMiLCJFcnJvciIsInN1YnN0cmluZyIsInZhbGlkYXRlSUQiLCJUeXBlRXJyb3IiLCJpZFJlZ2V4IiwidG9TdHJpbmciLCJ1cmxSZWdleCIsImdldFZpZGVvSUQiLCJzdHIiLCJ2YWxpZGF0ZVVSTCIsInN0cmluZyIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/url-utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/lib/utils.js":
/*!*********************************************!*\
  !*** ./node_modules/ytdl-core/lib/utils.js ***!
  \*********************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("const miniget = __webpack_require__(/*! miniget */ \"(rsc)/./node_modules/miniget/dist/index.js\");\n/**\n * Extract string inbetween another.\n *\n * @param {string} haystack\n * @param {string} left\n * @param {string} right\n * @returns {string}\n */ exports.between = (haystack, left, right)=>{\n    let pos;\n    if (left instanceof RegExp) {\n        const match = haystack.match(left);\n        if (!match) {\n            return \"\";\n        }\n        pos = match.index + match[0].length;\n    } else {\n        pos = haystack.indexOf(left);\n        if (pos === -1) {\n            return \"\";\n        }\n        pos += left.length;\n    }\n    haystack = haystack.slice(pos);\n    pos = haystack.indexOf(right);\n    if (pos === -1) {\n        return \"\";\n    }\n    haystack = haystack.slice(0, pos);\n    return haystack;\n};\n/**\n * Get a number from an abbreviated number string.\n *\n * @param {string} string\n * @returns {number}\n */ exports.parseAbbreviatedNumber = (string)=>{\n    const match = string.replace(\",\", \".\").replace(\" \", \"\").match(/([\\d,.]+)([MK]?)/);\n    if (match) {\n        let [, num, multi] = match;\n        num = parseFloat(num);\n        return Math.round(multi === \"M\" ? num * 1000000 : multi === \"K\" ? num * 1000 : num);\n    }\n    return null;\n};\n/**\n * Escape sequences for cutAfterJS\n * @param {string} start the character string the escape sequence\n * @param {string} end the character string to stop the escape seequence\n * @param {undefined|Regex} startPrefix a regex to check against the preceding 10 characters\n */ const ESCAPING_SEQUENZES = [\n    // Strings\n    {\n        start: '\"',\n        end: '\"'\n    },\n    {\n        start: \"'\",\n        end: \"'\"\n    },\n    {\n        start: \"`\",\n        end: \"`\"\n    },\n    // RegeEx\n    {\n        start: \"/\",\n        end: \"/\",\n        startPrefix: /(^|[[{:;,/])\\s?$/\n    }\n];\n/**\n * Match begin and end braces of input JS, return only JS\n *\n * @param {string} mixedJson\n * @returns {string}\n*/ exports.cutAfterJS = (mixedJson)=>{\n    // Define the general open and closing tag\n    let open, close;\n    if (mixedJson[0] === \"[\") {\n        open = \"[\";\n        close = \"]\";\n    } else if (mixedJson[0] === \"{\") {\n        open = \"{\";\n        close = \"}\";\n    }\n    if (!open) {\n        throw new Error(`Can't cut unsupported JSON (need to begin with [ or { ) but got: ${mixedJson[0]}`);\n    }\n    // States if the loop is currently inside an escaped js object\n    let isEscapedObject = null;\n    // States if the current character is treated as escaped or not\n    let isEscaped = false;\n    // Current open brackets to be closed\n    let counter = 0;\n    let i;\n    // Go through all characters from the start\n    for(i = 0; i < mixedJson.length; i++){\n        // End of current escaped object\n        if (!isEscaped && isEscapedObject !== null && mixedJson[i] === isEscapedObject.end) {\n            isEscapedObject = null;\n            continue;\n        // Might be the start of a new escaped object\n        } else if (!isEscaped && isEscapedObject === null) {\n            for (const escaped of ESCAPING_SEQUENZES){\n                if (mixedJson[i] !== escaped.start) continue;\n                // Test startPrefix against last 10 characters\n                if (!escaped.startPrefix || mixedJson.substring(i - 10, i).match(escaped.startPrefix)) {\n                    isEscapedObject = escaped;\n                    break;\n                }\n            }\n            // Continue if we found a new escaped object\n            if (isEscapedObject !== null) {\n                continue;\n            }\n        }\n        // Toggle the isEscaped boolean for every backslash\n        // Reset for every regular character\n        isEscaped = mixedJson[i] === \"\\\\\" && !isEscaped;\n        if (isEscapedObject !== null) continue;\n        if (mixedJson[i] === open) {\n            counter++;\n        } else if (mixedJson[i] === close) {\n            counter--;\n        }\n        // All brackets have been closed, thus end of JSON is reached\n        if (counter === 0) {\n            // Return the cut JSON\n            return mixedJson.substring(0, i + 1);\n        }\n    }\n    // We ran through the whole string and ended up with an unclosed bracket\n    throw Error(\"Can't cut unsupported JSON (no matching closing bracket found)\");\n};\n/**\n * Checks if there is a playability error.\n *\n * @param {Object} player_response\n * @param {Array.<string>} statuses\n * @param {Error} ErrorType\n * @returns {!Error}\n */ exports.playError = (player_response, statuses, ErrorType = Error)=>{\n    let playability = player_response && player_response.playabilityStatus;\n    if (playability && statuses.includes(playability.status)) {\n        return new ErrorType(playability.reason || playability.messages && playability.messages[0]);\n    }\n    return null;\n};\n/**\n * Does a miniget request and calls options.requestCallback if present\n *\n * @param {string} url the request url\n * @param {Object} options an object with optional requestOptions and requestCallback parameters\n * @param {Object} requestOptionsOverwrite overwrite of options.requestOptions\n * @returns {miniget.Stream}\n */ exports.exposedMiniget = (url, options = {}, requestOptionsOverwrite)=>{\n    const req = miniget(url, requestOptionsOverwrite || options.requestOptions);\n    if (typeof options.requestCallback === \"function\") options.requestCallback(req);\n    return req;\n};\n/**\n * Temporary helper to help deprecating a few properties.\n *\n * @param {Object} obj\n * @param {string} prop\n * @param {Object} value\n * @param {string} oldPath\n * @param {string} newPath\n */ exports.deprecate = (obj, prop, value, oldPath, newPath)=>{\n    Object.defineProperty(obj, prop, {\n        get: ()=>{\n            console.warn(`\\`${oldPath}\\` will be removed in a near future release, ` + `use \\`${newPath}\\` instead.`);\n            return value;\n        }\n    });\n};\n// Check for updates.\nconst pkg = __webpack_require__(/*! ../package.json */ \"(rsc)/./node_modules/ytdl-core/package.json\");\nconst UPDATE_INTERVAL = 1000 * 60 * 60 * 12;\nexports.lastUpdateCheck = 0;\nexports.checkForUpdates = ()=>{\n    if (!process.env.YTDL_NO_UPDATE && !pkg.version.startsWith(\"0.0.0-\") && Date.now() - exports.lastUpdateCheck >= UPDATE_INTERVAL) {\n        exports.lastUpdateCheck = Date.now();\n        return miniget(\"https://api.github.com/repos/fent/node-ytdl-core/releases/latest\", {\n            headers: {\n                \"User-Agent\": \"ytdl-core\"\n            }\n        }).text().then((response)=>{\n            if (JSON.parse(response).tag_name !== `v${pkg.version}`) {\n                console.warn('\\x1b[33mWARNING:\\x1b[0m ytdl-core is out of date! Update with \"npm install ytdl-core@latest\".');\n            }\n        }, (err)=>{\n            console.warn(\"Error checking for updates:\", err.message);\n            console.warn(\"You can disable this check by setting the `YTDL_NO_UPDATE` env variable.\");\n        });\n    }\n    return null;\n};\n/**\n * Gets random IPv6 Address from a block\n *\n * @param {string} ip the IPv6 block in CIDR-Notation\n * @returns {string}\n */ exports.getRandomIPv6 = (ip)=>{\n    // Start with a fast Regex-Check\n    if (!isIPv6(ip)) throw Error(\"Invalid IPv6 format\");\n    // Start by splitting and normalizing addr and mask\n    const [rawAddr, rawMask] = ip.split(\"/\");\n    let base10Mask = parseInt(rawMask);\n    if (!base10Mask || base10Mask > 128 || base10Mask < 24) throw Error(\"Invalid IPv6 subnet\");\n    const base10addr = normalizeIP(rawAddr);\n    // Get random addr to pad with\n    // using Math.random since we're not requiring high level of randomness\n    const randomAddr = new Array(8).fill(1).map(()=>Math.floor(Math.random() * 0xffff));\n    // Merge base10addr with randomAddr\n    const mergedAddr = randomAddr.map((randomItem, idx)=>{\n        // Calculate the amount of static bits\n        const staticBits = Math.min(base10Mask, 16);\n        // Adjust the bitmask with the staticBits\n        base10Mask -= staticBits;\n        // Calculate the bitmask\n        // lsb makes the calculation way more complicated\n        const mask = 0xffff - (2 ** (16 - staticBits) - 1);\n        // Combine base10addr and random\n        return (base10addr[idx] & mask) + (randomItem & (mask ^ 0xffff));\n    });\n    // Return new addr\n    return mergedAddr.map((x)=>x.toString(\"16\")).join(\":\");\n};\n// eslint-disable-next-line max-len\nconst IPV6_REGEX = /^(([0-9a-f]{1,4}:)(:[0-9a-f]{1,4}){1,6}|([0-9a-f]{1,4}:){1,2}(:[0-9a-f]{1,4}){1,5}|([0-9a-f]{1,4}:){1,3}(:[0-9a-f]{1,4}){1,4}|([0-9a-f]{1,4}:){1,4}(:[0-9a-f]{1,4}){1,3}|([0-9a-f]{1,4}:){1,5}(:[0-9a-f]{1,4}){1,2}|([0-9a-f]{1,4}:){1,6}(:[0-9a-f]{1,4})|([0-9a-f]{1,4}:){1,7}(([0-9a-f]{1,4})|:))\\/(1[0-1]\\d|12[0-8]|\\d{1,2})$/;\n/**\n * Quick check for a valid IPv6\n * The Regex only accepts a subset of all IPv6 Addresses\n *\n * @param {string} ip the IPv6 block in CIDR-Notation to test\n * @returns {boolean} true if valid\n */ const isIPv6 = exports.isIPv6 = (ip)=>IPV6_REGEX.test(ip);\n/**\n * Normalise an IP Address\n *\n * @param {string} ip the IPv6 Addr\n * @returns {number[]} the 8 parts of the IPv6 as Integers\n */ const normalizeIP = exports.normalizeIP = (ip)=>{\n    // Split by fill position\n    const parts = ip.split(\"::\").map((x)=>x.split(\":\"));\n    // Normalize start and end\n    const partStart = parts[0] || [];\n    const partEnd = parts[1] || [];\n    partEnd.reverse();\n    // Placeholder for full ip\n    const fullIP = new Array(8).fill(0);\n    // Fill in start and end parts\n    for(let i = 0; i < Math.min(partStart.length, 8); i++){\n        fullIP[i] = parseInt(partStart[i], 16) || 0;\n    }\n    for(let i = 0; i < Math.min(partEnd.length, 8); i++){\n        fullIP[7 - i] = parseInt(partEnd[i], 16) || 0;\n    }\n    return fullIP;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/ytdl-core/lib/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/ytdl-core/package.json":
/*!*********************************************!*\
  !*** ./node_modules/ytdl-core/package.json ***!
  \*********************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"name":"ytdl-core","description":"YouTube video downloader in pure javascript.","keywords":["youtube","video","download"],"version":"4.11.5","repository":{"type":"git","url":"git://github.com/fent/node-ytdl-core.git"},"author":"fent <fentbox@gmail.com> (https://github.com/fent)","contributors":["Tobias Kutscha (https://github.com/TimeForANinja)","Andrew Kelley (https://github.com/andrewrk)","Mauricio Allende (https://github.com/mallendeo)","Rodrigo Altamirano (https://github.com/raltamirano)","Jim Buck (https://github.com/JimmyBoh)","Paweł Ruciński (https://github.com/Roki100)","Alexander Paolini (https://github.com/Million900o)"],"main":"./lib/index.js","types":"./typings/index.d.ts","files":["lib","typings"],"scripts":{"test":"nyc --reporter=lcov --reporter=text-summary npm run test:unit","test:unit":"mocha --ignore test/irl-test.js test/*-test.js --timeout 4000","test:irl":"mocha --timeout 16000 test/irl-test.js","lint":"eslint ./","lint:fix":"eslint --fix ./","lint:typings":"tslint typings/index.d.ts","lint:typings:fix":"tslint --fix typings/index.d.ts"},"dependencies":{"m3u8stream":"^0.8.6","miniget":"^4.2.2","sax":"^1.1.3"},"devDependencies":{"@types/node":"^13.1.0","assert-diff":"^3.0.1","dtslint":"^3.6.14","eslint":"^6.8.0","mocha":"^7.0.0","muk-require":"^1.2.0","nock":"^13.0.4","nyc":"^15.0.0","sinon":"^9.0.0","stream-equal":"~1.1.0","typescript":"^3.9.7"},"engines":{"node":">=12"},"license":"MIT"}');

/***/ })

};
;