"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/miniget";
exports.ids = ["vendor-chunks/miniget"];
exports.modules = {

/***/ "(rsc)/./node_modules/miniget/dist/index.js":
/*!********************************************!*\
  !*** ./node_modules/miniget/dist/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar __importDefault = (void 0) && (void 0).__importDefault || function(mod) {\n    return mod && mod.__esModule ? mod : {\n        \"default\": mod\n    };\n};\nconst http_1 = __importDefault(__webpack_require__(/*! http */ \"http\"));\nconst https_1 = __importDefault(__webpack_require__(/*! https */ \"https\"));\nconst stream_1 = __webpack_require__(/*! stream */ \"stream\");\nconst httpLibs = {\n    \"http:\": http_1.default,\n    \"https:\": https_1.default\n};\nconst redirectStatusCodes = new Set([\n    301,\n    302,\n    303,\n    307,\n    308\n]);\nconst retryStatusCodes = new Set([\n    429,\n    503\n]);\n// `request`, `response`, `abort`, left out, miniget will emit these.\nconst requestEvents = [\n    \"connect\",\n    \"continue\",\n    \"information\",\n    \"socket\",\n    \"timeout\",\n    \"upgrade\"\n];\nconst responseEvents = [\n    \"aborted\"\n];\nMiniget.MinigetError = class MinigetError extends Error {\n    constructor(message, statusCode){\n        super(message);\n        this.statusCode = statusCode;\n    }\n};\nMiniget.defaultOptions = {\n    maxRedirects: 10,\n    maxRetries: 2,\n    maxReconnects: 0,\n    backoff: {\n        inc: 100,\n        max: 10000\n    }\n};\nfunction Miniget(url, options = {}) {\n    var _a;\n    const opts = Object.assign({}, Miniget.defaultOptions, options);\n    const stream = new stream_1.PassThrough({\n        highWaterMark: opts.highWaterMark\n    });\n    stream.destroyed = stream.aborted = false;\n    let activeRequest;\n    let activeResponse;\n    let activeDecodedStream;\n    let redirects = 0;\n    let retries = 0;\n    let retryTimeout;\n    let reconnects = 0;\n    let contentLength;\n    let acceptRanges = false;\n    let rangeStart = 0, rangeEnd;\n    let downloaded = 0;\n    // Check if this is a ranged request.\n    if ((_a = opts.headers) === null || _a === void 0 ? void 0 : _a.Range) {\n        let r = /bytes=(\\d+)-(\\d+)?/.exec(`${opts.headers.Range}`);\n        if (r) {\n            rangeStart = parseInt(r[1], 10);\n            rangeEnd = parseInt(r[2], 10);\n        }\n    }\n    // Add `Accept-Encoding` header.\n    if (opts.acceptEncoding) {\n        opts.headers = Object.assign({\n            \"Accept-Encoding\": Object.keys(opts.acceptEncoding).join(\", \")\n        }, opts.headers);\n    }\n    const downloadHasStarted = ()=>activeDecodedStream && downloaded > 0;\n    const downloadComplete = ()=>!acceptRanges || downloaded === contentLength;\n    const reconnect = (err)=>{\n        activeDecodedStream = null;\n        retries = 0;\n        let inc = opts.backoff.inc;\n        let ms = Math.min(inc, opts.backoff.max);\n        retryTimeout = setTimeout(doDownload, ms);\n        stream.emit(\"reconnect\", reconnects, err);\n    };\n    const reconnectIfEndedEarly = (err)=>{\n        if (options.method !== \"HEAD\" && !downloadComplete() && reconnects++ < opts.maxReconnects) {\n            reconnect(err);\n            return true;\n        }\n        return false;\n    };\n    const retryRequest = (retryOptions)=>{\n        if (stream.destroyed) {\n            return false;\n        }\n        if (downloadHasStarted()) {\n            return reconnectIfEndedEarly(retryOptions.err);\n        } else if ((!retryOptions.err || retryOptions.err.message === \"ENOTFOUND\") && retries++ < opts.maxRetries) {\n            let ms = retryOptions.retryAfter || Math.min(retries * opts.backoff.inc, opts.backoff.max);\n            retryTimeout = setTimeout(doDownload, ms);\n            stream.emit(\"retry\", retries, retryOptions.err);\n            return true;\n        }\n        return false;\n    };\n    const forwardEvents = (ee, events)=>{\n        for (let event of events){\n            ee.on(event, stream.emit.bind(stream, event));\n        }\n    };\n    const doDownload = ()=>{\n        let parsed = {}, httpLib;\n        try {\n            let urlObj = typeof url === \"string\" ? new URL(url) : url;\n            parsed = Object.assign({}, {\n                host: urlObj.host,\n                hostname: urlObj.hostname,\n                path: urlObj.pathname + urlObj.search + urlObj.hash,\n                port: urlObj.port,\n                protocol: urlObj.protocol\n            });\n            if (urlObj.username) {\n                parsed.auth = `${urlObj.username}:${urlObj.password}`;\n            }\n            httpLib = httpLibs[String(parsed.protocol)];\n        } catch (err) {\n        // Let the error be caught by the if statement below.\n        }\n        if (!httpLib) {\n            stream.emit(\"error\", new Miniget.MinigetError(`Invalid URL: ${url}`));\n            return;\n        }\n        Object.assign(parsed, opts);\n        if (acceptRanges && downloaded > 0) {\n            let start = downloaded + rangeStart;\n            let end = rangeEnd || \"\";\n            parsed.headers = Object.assign({}, parsed.headers, {\n                Range: `bytes=${start}-${end}`\n            });\n        }\n        if (opts.transform) {\n            try {\n                parsed = opts.transform(parsed);\n            } catch (err) {\n                stream.emit(\"error\", err);\n                return;\n            }\n            if (!parsed || parsed.protocol) {\n                httpLib = httpLibs[String(parsed === null || parsed === void 0 ? void 0 : parsed.protocol)];\n                if (!httpLib) {\n                    stream.emit(\"error\", new Miniget.MinigetError(\"Invalid URL object from `transform` function\"));\n                    return;\n                }\n            }\n        }\n        const onError = (err)=>{\n            if (stream.destroyed || stream.readableEnded) {\n                return;\n            }\n            cleanup();\n            if (!retryRequest({\n                err\n            })) {\n                stream.emit(\"error\", err);\n            } else {\n                activeRequest.removeListener(\"close\", onRequestClose);\n            }\n        };\n        const onRequestClose = ()=>{\n            cleanup();\n            retryRequest({});\n        };\n        const cleanup = ()=>{\n            activeRequest.removeListener(\"close\", onRequestClose);\n            activeResponse === null || activeResponse === void 0 ? void 0 : activeResponse.removeListener(\"data\", onData);\n            activeDecodedStream === null || activeDecodedStream === void 0 ? void 0 : activeDecodedStream.removeListener(\"end\", onEnd);\n        };\n        const onData = (chunk)=>{\n            downloaded += chunk.length;\n        };\n        const onEnd = ()=>{\n            cleanup();\n            if (!reconnectIfEndedEarly()) {\n                stream.end();\n            }\n        };\n        activeRequest = httpLib.request(parsed, (res)=>{\n            // Needed for node v10, v12.\n            // istanbul ignore next\n            if (stream.destroyed) {\n                return;\n            }\n            if (redirectStatusCodes.has(res.statusCode)) {\n                if (redirects++ >= opts.maxRedirects) {\n                    stream.emit(\"error\", new Miniget.MinigetError(\"Too many redirects\"));\n                } else {\n                    if (res.headers.location) {\n                        url = res.headers.location;\n                    } else {\n                        let err = new Miniget.MinigetError(\"Redirect status code given with no location\", res.statusCode);\n                        stream.emit(\"error\", err);\n                        cleanup();\n                        return;\n                    }\n                    setTimeout(doDownload, parseInt(res.headers[\"retry-after\"] || \"0\", 10) * 1000);\n                    stream.emit(\"redirect\", url);\n                }\n                cleanup();\n                return;\n            // Check for rate limiting.\n            } else if (retryStatusCodes.has(res.statusCode)) {\n                if (!retryRequest({\n                    retryAfter: parseInt(res.headers[\"retry-after\"] || \"0\", 10)\n                })) {\n                    let err = new Miniget.MinigetError(`Status code: ${res.statusCode}`, res.statusCode);\n                    stream.emit(\"error\", err);\n                }\n                cleanup();\n                return;\n            } else if (res.statusCode && (res.statusCode < 200 || res.statusCode >= 400)) {\n                let err = new Miniget.MinigetError(`Status code: ${res.statusCode}`, res.statusCode);\n                if (res.statusCode >= 500) {\n                    onError(err);\n                } else {\n                    stream.emit(\"error\", err);\n                }\n                cleanup();\n                return;\n            }\n            activeDecodedStream = res;\n            if (opts.acceptEncoding && res.headers[\"content-encoding\"]) {\n                for (let enc of res.headers[\"content-encoding\"].split(\", \").reverse()){\n                    let fn = opts.acceptEncoding[enc];\n                    if (fn) {\n                        activeDecodedStream = activeDecodedStream.pipe(fn());\n                        activeDecodedStream.on(\"error\", onError);\n                    }\n                }\n            }\n            if (!contentLength) {\n                contentLength = parseInt(`${res.headers[\"content-length\"]}`, 10);\n                acceptRanges = res.headers[\"accept-ranges\"] === \"bytes\" && contentLength > 0 && opts.maxReconnects > 0;\n            }\n            res.on(\"data\", onData);\n            activeDecodedStream.on(\"end\", onEnd);\n            activeDecodedStream.pipe(stream, {\n                end: !acceptRanges\n            });\n            activeResponse = res;\n            stream.emit(\"response\", res);\n            res.on(\"error\", onError);\n            forwardEvents(res, responseEvents);\n        });\n        activeRequest.on(\"error\", onError);\n        activeRequest.on(\"close\", onRequestClose);\n        forwardEvents(activeRequest, requestEvents);\n        if (stream.destroyed) {\n            streamDestroy(...destroyArgs);\n        }\n        stream.emit(\"request\", activeRequest);\n        activeRequest.end();\n    };\n    stream.abort = (err)=>{\n        console.warn(\"`MinigetStream#abort()` has been deprecated in favor of `MinigetStream#destroy()`\");\n        stream.aborted = true;\n        stream.emit(\"abort\");\n        stream.destroy(err);\n    };\n    let destroyArgs = [];\n    const streamDestroy = (err)=>{\n        activeRequest.destroy(err);\n        activeDecodedStream === null || activeDecodedStream === void 0 ? void 0 : activeDecodedStream.unpipe(stream);\n        activeDecodedStream === null || activeDecodedStream === void 0 ? void 0 : activeDecodedStream.destroy();\n        clearTimeout(retryTimeout);\n    };\n    stream._destroy = (...args)=>{\n        stream.destroyed = true;\n        if (activeRequest) {\n            streamDestroy(...args);\n        } else {\n            destroyArgs = args;\n        }\n    };\n    stream.text = ()=>new Promise((resolve, reject)=>{\n            let body = \"\";\n            stream.setEncoding(\"utf8\");\n            stream.on(\"data\", (chunk)=>body += chunk);\n            stream.on(\"end\", ()=>resolve(body));\n            stream.on(\"error\", reject);\n        });\n    process.nextTick(doDownload);\n    return stream;\n}\nmodule.exports = Miniget; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/miniget/dist/index.js\n");

/***/ })

};
;